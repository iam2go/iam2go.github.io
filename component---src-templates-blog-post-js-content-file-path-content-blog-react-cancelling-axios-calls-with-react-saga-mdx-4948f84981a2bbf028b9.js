"use strict";(self.webpackChunkleego_dev_log=self.webpackChunkleego_dev_log||[]).push([[921],{5416:function(e,t,n){n.r(t),n.d(t,{Head:function(){return v},default:function(){return x}});var a=n(1151),l=n(7294);function c(e){const t=Object.assign({p:"p",strong:"strong",code:"code",h1:"h1",a:"a",span:"span",pre:"pre",ol:"ol",li:"li",em:"em"},(0,a.ah)(),e.components);return l.createElement(l.Fragment,null,l.createElement("img",{src:"https://blog.kakaocdn.net/dn/PvW0j/btrSaq61PiV/axgFtGDb5UnGdzTJCqVyH1/img.gif",width:"500",className:"m-auto"}),"\n",l.createElement("br"),"\n",l.createElement("br"),"\n",l.createElement(t.p,null,"회사 프로젝트에서 특정 수치를 조회하기 위해 사용하는 API가 있다. 이 API는 상황에 따라서 호출 시간이 오래 걸리고, 조회 항목이 많아질수록 호출 시간이 길어진다. 만약 사용자가 수치를 조회하는 중 화면을 나간다면, 수치 조회 API는 여전히 Pending 중이기 때문에 그 영향으로 새로 렌더링 되는 화면의 로딩이 길어지게 된다."),"\n",l.createElement(t.p,null,"수치 조회 ",l.createElement(t.strong,null,"API의 응답을 기다리는 중 현재 페이지가 unmount된다면, 해당 API 호출을 취소하여 불필요한 데이터 호출을 막고, UX를 개선하려 한다.")),"\n",l.createElement("br"),"\n",l.createElement(t.p,null,"현재 프로젝트에서 비동기 통신 라이브러리는 ",l.createElement(t.code,null,"axios")," 사용, 비동기 로직은 ",l.createElement(t.code,null,"redux-saga")," 로 관리 중이다. 따라서 이 글에서는 이 두 라이브러리를 사용하여 API 호출을 취소하는 방법을 다룬다."),"\n",l.createElement("br"),"\n",l.createElement("br"),"\n",l.createElement(t.h1,{id:"axios의-취소-토큰",style:{position:"relative"}},l.createElement(t.a,{href:"#axios%EC%9D%98-%EC%B7%A8%EC%86%8C-%ED%86%A0%ED%81%B0","aria-label":"axios의 취소 토큰 permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Axios의 취소 토큰"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://axios-http.com/kr/docs/cancellation"},"참고")),"\n",l.createElement(t.p,null,"axios에서는 ",l.createElement(t.code,null,"CancelToken.source")," 을 사용하여 취소 토큰을 만들 수 있다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"const cancelSource = axios.CancelToken.source();\n")),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"// GET방식\naxios.get('/user/12345', {\n  cancelToken: cancelSource.token\n})\n\n// POST방식\naxios.post('/user/12345', {\n  ...params\n}, {\n  cancelToken: cancelSource.token\n})\n")),"\n",l.createElement(t.p,null,"만든 취소 토큰을 axios 요청에 옵션으로 넣어주고"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"cancelSource.cancel();\n")),"\n",l.createElement(t.p,null,l.createElement(t.code,null,"cancel")," 메서드 호출로 해당 요청을 취소시키는 방식이다."),"\n",l.createElement(t.p,null,"❗️같은 취소 토큰으로 여러 요청을 취소할 수도 있다."),"\n",l.createElement("br"),"\n",l.createElement(t.p,null,"만약 API 호출 로직이 컴포넌트 내부에 있었다면, ",l.createElement(t.code,null,"useEffect")," 안에서 취소 토큰을 생성한 뒤, API 호출 시 해당 토큰을 넣고, clean up 함수 내에서 ",l.createElement(t.code,null,"cancel()"),"을 실행시키면 된다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"useEffect(() => {\n    const cancelSource = axios.CancelToken.source();\n    const fetch = async() => {\n        api호출 ~~\n    }\n\n    fetch();\n    return () => {\n        cancelSource.cancel();\n    }\n},[])\n")),"\n",l.createElement(t.p,null,"대충 이런 식으로?"),"\n",l.createElement(t.p,null,"하지만 비동기 호출을 saga에서 한다면 저 로직을 어떻게 변형시켜야 할까?"),"\n",l.createElement("br"),"\n",l.createElement("br"),"\n",l.createElement(t.h1,{id:"redux-saga에서의-axios-cencel",style:{position:"relative"}},l.createElement(t.a,{href:"#redux-saga%EC%97%90%EC%84%9C%EC%9D%98-axios-cencel","aria-label":"redux saga에서의 axios cencel permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Redux-saga에서의 axios cencel"),"\n",l.createElement(t.p,null,"대략적으로 로직을 그려본다면,"),"\n",l.createElement(t.ol,null,"\n",l.createElement(t.li,null,"취소 토큰(",l.createElement(t.code,null,"CancelToken"),")을 생성한 뒤, API 호출 시 해당 토큰을 넣는 과정은 saga 함수에서 진행."),"\n",l.createElement(t.li,null,l.createElement(t.code,null,"useEffect"),"를 통해 해당 컴포넌트가 ",l.createElement(t.code,null,"unmount")," 된다면 API호출 취소 액션을 발생 시키고"),"\n",l.createElement(t.li,null,"saga는 해당 액션을 모니터링하고 있다가 액션 발생시 ",l.createElement(t.code,null,"cancel()")," 실행한다."),"\n"),"\n",l.createElement(t.p,null,"의 순서로 진행될 것이다."),"\n",l.createElement("br"),"\n",l.createElement("br"),"\n",l.createElement(t.h1,{id:"기존의-saga-구성",style:{position:"relative"}},l.createElement(t.a,{href:"#%EA%B8%B0%EC%A1%B4%EC%9D%98-saga-%EA%B5%AC%EC%84%B1","aria-label":"기존의 saga 구성 permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"기존의 saga 구성"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'// saga.js\n\nexport const getDataAction = createAction("getDataAction");\n\nfunction* getDataFlow(action) {\n  const { params } = action.payload;\n\n  yield put(getDataRequest());\n\n  try {\n    const response = yield call(getData, params);\n        yield put(getRequestSuccess(response.data));\n    } catch (error) {\n        yield put(getRequestFailure(error));\n    }\n}\n\nfunction* dataSaga(){\n    yield takeLatest(getDataAction, getDataFlow);\n}\n')),"\n",l.createElement(t.p,null,"기존의 사가 구조를 간략하게 재구성하여 나타냈다."),"\n",l.createElement(t.p,null,l.createElement(t.code,null,"getDataAction")," 이 발생하면 ",l.createElement(t.code,null,"getDataFlow"),"가 실행된다."),"\n",l.createElement(t.p,null,l.createElement(t.code,null,"const response = yield call(getData, params)")," 에서 ",l.createElement(t.code,null,"getData")," 는 axios를 호출 메서드다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"// apis.js\n\nexport const getData = async(params) => {\n    const response = await axios.post('/somethings', params);\n    return response.data;\n}\n")),"\n",l.createElement("br"),"\n",l.createElement("br"),"\n",l.createElement(t.h1,{id:"api호출-시-취소-토큰-넣어주기",style:{position:"relative"}},l.createElement(t.a,{href:"#api%ED%98%B8%EC%B6%9C-%EC%8B%9C-%EC%B7%A8%EC%86%8C-%ED%86%A0%ED%81%B0-%EB%84%A3%EC%96%B4%EC%A3%BC%EA%B8%B0","aria-label":"api호출 시 취소 토큰 넣어주기 permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"API호출 시 취소 토큰 넣어주기"),"\n",l.createElement(t.p,null,"이 기존 로직에 ",l.createElement(t.strong,null,l.createElement(t.em,null,"1. 취소 토큰을 생성한 뒤 API 호출시 해당 토큰을 넣는 과정을"))," 추가하면 코드는 다음과 같다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"function* getDataFlow(action) {\n  const { params } = action.payload;\n  yield put(getDataRequest());\n\n  try {\n        const cancelSource = axios.CancelToken,source();\n\n    const response = yield call(getData, params, {cancelToken: cancelSource.token});\n        yield put(getRequestSuccess(response.data));\n    } catch (error) {\n        yield put(getRequestFailure(error));\n    }\n}\n")),"\n",l.createElement("br"),"\n",l.createElement("br"),"\n",l.createElement(t.h1,{id:"unmount시-api취소-액션-생성",style:{position:"relative"}},l.createElement(t.a,{href:"#unmount%EC%8B%9C-api%EC%B7%A8%EC%86%8C-%EC%95%A1%EC%85%98-%EC%83%9D%EC%84%B1","aria-label":"unmount시 api취소 액션 생성 permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"unmount시 API취소 액션 생성"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'// saga.js\n\nexport const getDataAction = createAction("getDataAction");\nexport const cancelDataAction = createAction("cancelDataAction");\n\n...\n')),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"// (API를 호출하는)Component.jsx\n\n...\nuseEffect(() => () => {\n    dispatch(cancelDataAction());\n},[])\n")),"\n",l.createElement(t.p,null,"API 호출 취소를 요청할 액션 객체 ",l.createElement(t.code,null,"cancelDataAction")," 을 생성한 뒤,\n컴포넌트가 ",l.createElement(t.code,null,"unmount"),"시 해당 액션이 발생하도록 추가해주었다."),"\n",l.createElement(t.p,null,"이제 다시 ",l.createElement(t.code,null,"getDataFlow")," 로 돌아가 ",l.createElement(t.code,null,"cancelDataAction")," 을 모니터링하는 코드를 추가해주자."),"\n",l.createElement("br"),"\n",l.createElement("br"),"\n",l.createElement(t.h1,{id:"취소-액션-모니터링-추가",style:{position:"relative"}},l.createElement(t.a,{href:"#%EC%B7%A8%EC%86%8C-%EC%95%A1%EC%85%98-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EC%B6%94%EA%B0%80","aria-label":"취소 액션 모니터링 추가 permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"취소 액션 모니터링 추가"),"\n",l.createElement(t.p,null,"여기서 유의해야 할 점은 api 호출을 위해 사용한 ",l.createElement(t.code,null,"call()")," 은 ",l.createElement(t.strong,null,"봉쇄 effect"),"라는 점이다."),"\n",l.createElement(t.p,null,"일단 call effect가 호출되면 그 결과가 나올 때까지 다음으로 넘어갈 수 없으므로\n결과가 나오기 전 pending 상태에서는 ",l.createElement(t.code,null,"cancelDataAction"),"을 캐치할 수 없다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"const response = yield call(getData, params, {cancelToken: cancelSource.token});\nyield take(cancelDataAction); // call effect가 완료될때까지 취소 액션을 캐치하지 못한다.\n")),"\n",l.createElement(t.p,null,"우리는 API 호출 중 ",l.createElement(t.code,null,"cancelDataAction"),"이 발생하면, 그 즉시 API 호출을 취소하기를 원하는데,\n위처럼 구현한다면 우리가 원하는 결과를 얻을 수 없다."),"\n",l.createElement("br"),"\n",l.createElement(t.p,null,"이런 경우 사용하는 것이 ",l.createElement(t.strong,null,l.createElement(t.code,null,"race()")," Effect이다.")),"\n",l.createElement(t.p,null,"race는 이름 그대로 여러 이펙트를 경주시켜 가장 먼저 완료된 effect만을 실행하고 ",l.createElement(t.strong,null,"경주에서 진 이펙트들을 자동으로 취소시킨다.")),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"const {response, cancel} = yield race({\n      response: call(getData, params , {cancelToken: cancelSource.token}),\n      cancel: take(cancelCountAction)\n    });\n")),"\n",l.createElement(t.p,null,"사용방법은 위와 같다."),"\n",l.createElement("br"),"\n",l.createElement(t.p,null,"만약 call effect가 무사히 ",l.createElement(t.code,null,"resolve")," 되면 response에 API 응답 데이터가 담기고, resolve 되기 전에 취소 요청이 들어오면, cancel에 액션 객체가 담긴다."),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,"if(cancel && cancel.type){\n      yield call(cancelSource.cancel);\n}else{\n      yield put(getDataSuccess(getRequestSuccess(response.data)));\n}\n")),"\n",l.createElement(t.p,null,"아래 조건문을 추가하여 만약 cancel에 액션 객체가 담겼다면 cancel을 실행하고,\n아니라면 호출이 성공했다는 액션을 보내준다."),"\n",l.createElement(t.p,null,"이제 정상적으로 동작하는지 확인해보자."),"\n",l.createElement("img",{src:"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FeqkPQi%2FbtrSdaWIoAc%2FRgQKFheIP67p6XQc4ulO3k%2Fimg.png",width:"300",className:"m-auto"}),"\n",l.createElement(t.p,null,"API 호출이 완료되지 않은 상태에서 현재 페이지를 나가면,\n",l.createElement(t.strong,null,"pending")," 상태였던 데이터가 ",l.createElement(t.strong,null,"canceled"),"되는 것을 확인할 수 있다."),"\n",l.createElement("br"),"\n",l.createElement("br"),"\n",l.createElement(t.pre,null,l.createElement(t.code,null,'// saga.js\n\nexport const getDataAction = createAction("getDataAction");\nexport const cancelDataAction = createAction("cancelDataAction");\n\nfunction* getDataFlow(action) {\n  const { params } = action.payload;\n  yield put(getDataRequest());\n\n  try {\n        const cancelSource = axios.CancelToken,source();\n        const {response, cancel} = yield race({\n              response: call(getData, params , {cancelToken: cancelSource.token}),\n              cancel: take(cancelCountAction)\n            });\n\n        if(cancel && cancel.type){\n              yield call(cancelSource.cancel);\n        }else{\n              yield put(getDataSuccess(getRequestSuccess(response.data)));\n        }\n    } catch (error) {\n        yield put(getRequestFailure(error));\n    }\n}\n\nfunction* dataSaga(){\n    yield takeLatest(getDataAction, getDataFlow);\n}\n')),"\n",l.createElement(t.p,null,"전체적인 saga 코드는 다음과 같다."),"\n",l.createElement("br"),"\n",l.createElement("br"),"\n",l.createElement(t.h1,{id:"참고-",style:{position:"relative"}},l.createElement(t.a,{href:"#%EC%B0%B8%EA%B3%A0-","aria-label":"참고  permalink",className:"anchor before"},l.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"참고 📌"),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://stackoverflow.com/questions/50078589/cancel-of-requests-through-saga"},"https://stackoverflow.com/questions/50078589/cancel-of-requests-through-saga")),"\n",l.createElement(t.p,null," ",l.createElement(t.a,{href:"https://stackoverflow.com/questions/50078589/cancel-of-requests-through-saga"},"Cancel of requests through saga")),"\n",l.createElement(t.p,null,l.createElement(t.a,{href:"https://redux-saga.js.org/docs/api/#raceeffects"},"https://redux-saga.js.org/docs/api/#raceeffects")),"\n",l.createElement(t.p,null," ",l.createElement(t.a,{href:"https://redux-saga.js.org/docs/api/#raceeffects"},"API Reference | Redux-Saga")))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,a.ah)(),e.components);return t?l.createElement(t,e,l.createElement(c,e)):c(e)},o=n(1883),s=n(157),m=n(588),i=n(8709),u=n(9357),E=n(7174),p=n(4462),d=n(8336),h=n(1075);const g={img:e=>{let{src:t,alt:n}=e;return l.createElement("img",{src:t,alt:n,className:"m-auto md:w-3/4"})},pre:p.d,code:e=>l.createElement("code",Object.assign({},e,{className:"bg-background-primary text-accent-default bg-opacity-70"}))},f=e=>{var t;let{data:{previous:n,next:c,site:r,mdx:u},location:p,children:f}=e;const v=(null===(t=r.siteMetadata)||void 0===t?void 0:t.title)||"Title";return l.createElement(i.Z,{location:p,title:v},l.createElement("article",{className:"blog-post px-8 pt-10",itemScope:!0,itemType:"http://schema.org/Article"},l.createElement("header",{className:"text-center py-14"},l.createElement("h1",{itemProp:"headline"},u.frontmatter.title),l.createElement("p",{className:"text-accent-default text-xs mt-8"},u.frontmatter.date)),l.createElement("section",{className:"h-fit my-28 text-text-default",itemProp:"articleBody"},l.createElement(a.Zo,{components:g},f)),l.createElement(E.a,null,u.frontmatter.tags.map((e=>l.createElement(E.V,{key:e,text:e})))),l.createElement("hr",{className:"my-10"}),l.createElement(d.Z),l.createElement("footer")),l.createElement("nav",{className:"blog-post-nav px-8 mt-8"},l.createElement("ul",{className:"flex flex-wrap justify-between list-none p-0 text-text-default"},n?l.createElement(o.Link,{to:n.fields.slug,rel:"prev"},l.createElement("li",{className:"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3"},l.createElement(m.D,{size:22,className:"text-accent-default"}),l.createElement("p",{className:"max-w-[28rem]"},n.frontmatter.title))):l.createElement("div"),c&&l.createElement(o.Link,{to:c.fields.slug,rel:"next"},l.createElement("li",{className:"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3"},l.createElement("p",{className:"max-w-[28rem]"},c.frontmatter.title),l.createElement(s.M,{size:22,className:"text-accent-default"}))))),l.createElement(h.Z,{contents:u.tableOfContents}))},v=e=>{let{data:{mdx:t}}=e;return l.createElement(u.Z,{title:t.frontmatter.title,description:t.frontmatter.description||t.excerpt})};function x(e){return l.createElement(f,e,l.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-content-blog-react-cancelling-axios-calls-with-react-saga-mdx-4948f84981a2bbf028b9.js.map