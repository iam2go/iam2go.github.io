"use strict";(self.webpackChunkleego_dev_log=self.webpackChunkleego_dev_log||[]).push([[597],{7832:function(e,t,l){l.r(t),l.d(t,{Head:function(){return v},default:function(){return b}});var n=l(1151),r=l(7294);function c(e){const t=Object.assign({p:"p",strong:"strong",h1:"h1",a:"a",span:"span",pre:"pre",code:"code",em:"em",blockquote:"blockquote",br:"br"},(0,n.ah)(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.p,null,"이제까지의 프로젝트에는 상태 관리 라이브러리로 항상 ",r.createElement(t.strong,null,"Redux"),"를 사용했었는데, 그 이유는 단순하게 대부분의 사용자들이 redux를 사용했고, 사용자들이 가장 많이 사용하는 라이브러리 = 좋은 라이브러리라는 생각이 있었기 때문이다."),"\n",r.createElement(t.p,null,"Redux는 한때 너무 많은 양의 보일러 플레이트 코드를 작성해야 한다는 단점을 가지고 있었지만, ",r.createElement(t.strong,null,"Redux-toolkit의")," 등장으로 그 단점을 많이 보완되었다. 그럼에도 불구하고, 어떤 프로젝트에서는 전역 상태 관리를 위해 Redux를 설치하는 것이 너무 과하다고 느껴질 때가 있다."),"\n",r.createElement("br"),"\n",r.createElement("br"),"\n",r.createElement(t.h1,{id:"다른-대안-context-api",style:{position:"relative"}},r.createElement(t.a,{href:"#%EB%8B%A4%EB%A5%B8-%EB%8C%80%EC%95%88-context-api","aria-label":"다른 대안 context api permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"다른 대안, context API"),"\n",r.createElement(t.p,null,"라이브러리를 추가적으로 설치하지 않고 ",r.createElement(t.strong,null,"context API"),"를 사용하는것은 어떨까?"),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"context API"),"는 일일히 props를 넘겨주지 않고도 컴포넌트 트리 전체에 데이터를 제공할 수 있는 리액트의 내장 툴이다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"const MyContext = React.createContext(defaultValue);\n")),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"context"),"를 생성해서"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"<MyContext.Provider value={/* 어떤 값 */}>\n        {children} //value가 전달되는 곳.\n</MyContext.Provider>\n")),"\n",r.createElement(t.p,null,"위와 같이 컴포넌트를 ",r.createElement(t.code,null,"Provider"),"로 감싸주면, 그 하위에 있는 모든 컴포넌트들은 이 React Context에 저장되어 있는 전역 데이터에 접근할 수 있다."),"\n",r.createElement(t.p,null,"다만 ",r.createElement(t.code,null,"context"),"에서는 ",r.createElement(t.code,null,"Provider")," 하위에서 ",r.createElement(t.code,null,"context"),"를 구독하는 모든 컴포넌트는 ",r.createElement(t.code,null,"Provider"),"의 value prop가 바뀔 때마다 다시 렌더링 된다. 따라서 ",r.createElement(t.code,null,"context"),"를 관심사에 따라 나눠서 관리하거나 따로 최적화를 해줘야한다."),"\n",r.createElement(t.p,null,"공식 홈페이지의 ",r.createElement(t.strong,null,r.createElement(t.a,{href:"https://ko.reactjs.org/docs/context.html#when-to-use-context"},"언제 context를 써야 할까"))," 를 보면 ",r.createElement(t.code,null,"context"),"를 현재 로그인한 유저, 테마, 선호하는 언어 등의 데이터 공유 시에 사용할 것을 추천한다. 엄밀히 말하면 ",r.createElement(t.code,null,"context"),"는 ",r.createElement(t.strong,null,"전역적으로 데이터를 제공해주는")," 툴이지 ",r.createElement(t.strong,null,"전역 상태를 관리하는")," 툴이 아니다. redux의 대체 대상으로 고려하기에는 그 역할이 다르다."),"\n",r.createElement("br"),"\n",r.createElement("br"),"\n",r.createElement(t.h1,{id:"recoil을-써보자",style:{position:"relative"}},r.createElement(t.a,{href:"#recoil%EC%9D%84-%EC%8D%A8%EB%B3%B4%EC%9E%90","aria-label":"recoil을 써보자 permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"recoil을 써보자"),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"recoil"),"은 이러한 ",r.createElement(t.strong,null,"전역 상태 관리 문제에 대하여 react 팀에서 리액트다운 방법으로 개선하기 위하여 만든 상태 관리 라이브러리"),"이다."),"\n",r.createElement("br"),"\n",r.createElement(t.p,null,"주의할 점은 아직 알파버전만 나온 상태라는 것이다. 이 글을 작성한 시점을 기준으로 현재 ",r.createElement(t.code,null,"0.7.4")," 버전까지 나와있다. 따라서 실무나 규모가 큰 프로젝트에서 사용하기에는 위험부담이 있으므로 만약 도입하고자 한다면 신중하게 고민해야 한다."),"\n",r.createElement(t.p,null,r.createElement(t.a,{href:"https://github.com/facebookexperimental/Recoil/issues/1495"},"What's happening in the future of recoil")),"\n",r.createElement(t.p,null,"recoil의 메이저 버전이 언제 나오는지에 대한 질문에 ",r.createElement(t.em,null,'"we keep the project in an experimental status today until we are confident in a solution compatible with all upcoming React features."')," 라고 답한 것을 봐서는 아마도 당분간은 알파버전을 유지할 것 같다."),"\n",r.createElement("br"),"\n",r.createElement("br"),"\n",r.createElement(t.h1,{id:"recoil의-개발-동기",style:{position:"relative"}},r.createElement(t.a,{href:"#recoil%EC%9D%98-%EA%B0%9C%EB%B0%9C-%EB%8F%99%EA%B8%B0","aria-label":"recoil의 개발 동기 permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"recoil의 개발 동기"),"\n",r.createElement(t.p,null,r.createElement(t.a,{href:"https://recoiljs.org/ko/docs/introduction/motivation",title:"recoil개발동기"},"recoil 공식페이지"),"에서는 recoil를 개발하게 된 계기를 다음과 같이 설명했다."),"\n",r.createElement(t.blockquote,null,"\n",r.createElement(t.p,null,r.createElement(t.em,null,"호환성 및 단순함을 이유로 외부의 글로벌 상태 관리 라이브러리보다는 React 자체에 내장된 상태 관리 기능을 사용하는 것이 가장 좋다. 그러나 React는 다음과 같은 한계가 있다.")),"\n",r.createElement(t.p,null,r.createElement(t.em,null,"* 컴포넌트의 상태는 공통된 상위 요소까지 끌어올려야만 공유될 수 있으며, 이 과정에서 거대한 트리가 다시 렌더링 되는 효과를 야기하기도 한다."),r.createElement(t.br),"\n",r.createElement(t.em,null,"* Context는 단일 값만 저장할 수 있으며, 자체 소비자(consumer)를 가지는 여러 값들의 집합을 담을 수는 없다. 이 두 가지 특성이 트리의 최상단(state가 존재하는 곳)부터 트리의 말단(state가 사용되는 곳)까지의 코드 분할을 어렵게 한다.")),"\n",r.createElement(t.p,null,r.createElement(t.em,null,"우리는 API와 의미 및 동작을 ",r.createElement(t.strong,null,"가능한 React 답게 유지"),"하면서 이것을 개선하고자 한다.")),"\n"),"\n",r.createElement(t.p,null,"recoil의 개념은 매우 단순하다. 가능한 React답게 동작하는 것을 목표로 한 만큼 react hook과 사용법이 매우 닮아있다. 따라서 기존의 react hook을 사용한 개발자라면 recoil도 곧 잘 다룰 수 있을 것이다."),"\n",r.createElement("br"),"\n",r.createElement("br"),"\n",r.createElement(t.h1,{id:"초기-셋팅",style:{position:"relative"}},r.createElement(t.a,{href:"#%EC%B4%88%EA%B8%B0-%EC%85%8B%ED%8C%85","aria-label":"초기 셋팅 permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"초기 셋팅"),"\n",r.createElement(t.p,null,"먼저 초기 셋팅을 해보자."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"npm install recoil\n")),"\n",r.createElement("br"),"\n",r.createElement(t.p,null,"recoil을 설치해준 후,"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"import React from 'react';\nimport { RecoilRoot } from 'recoil';\n\nfunction Root() {\n  return (\n    <RecoilRoot>\n      <App />\n    </RecoilRoot>\n  );\n}\n")),"\n",r.createElement(t.p,null,"최상위 컴포넌트를 ",r.createElement(t.code,null,"RecoilRoot")," 로 감싸주면 모든 준비가 끝난다."),"\n",r.createElement(t.p,null,"redux를 사용할 때처럼 ",r.createElement(t.code,null,"<Provider store={store}>")," store를 props로 넘겨주지 않아도 된다."),"\n",r.createElement(t.p,null,"이제 ",r.createElement(t.code,null,"atoms")," 과 ",r.createElement(t.code,null,"selector")," 의 개념을 이해해보자."),"\n",r.createElement("br"),"\n",r.createElement("br"),"\n",r.createElement(t.h1,{id:"atoms",style:{position:"relative"}},r.createElement(t.a,{href:"#atoms","aria-label":"atoms permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"atoms"),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"atoms")," 은 상태의 단위로 업데이트와 구독이 가능하다. atom이 업데이트되면 해당 atom을 구독한 컴포넌트는 모두 다시 렌더링 된다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,'const wordState = atom<string>({\n  key: "wordState",\n  default: "",\n});\n')),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"atom")," 은 고유의 key값을 가진다. 상태를 컴포넌트에서 사용할 때 이 key값으로 식별한다."),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"default")," 는 말 그대로 초기값이다."),"\n",r.createElement("br"),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"const [word, setWord] = useRecoilState(wordState);\n")),"\n",r.createElement(t.p,null,"사용법도 간단하다. ",r.createElement(t.code,null,"useState")," 와 동일한 방식으로 사용해주면 된다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"const onClick = (value: string) => {\n      if (word.length >= 5) {\n        return;\n      }\n      setWord(word + value);\n    };\n")),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"word")," 는 상태값, ",r.createElement(t.code,null,"setWord")," 는 setter함수이다."),"\n",r.createElement("br"),"\n",r.createElement(t.p,null,"이밖에도 값만을, 또는 setter만을 반환하는 hook이 있으니 상황에 따라 적절하게 사용하면 된다."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,r.createElement(t.code,null,"useRecoilState()"))," atom의 값을 구독하여 업데이트할 수 있는 hook. ",r.createElement(t.code,null,"useState"),"와 동일한 형식을 가진다."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,r.createElement(t.code,null,"useRecoilValue()"))," atom의 값만을 반환한다."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,r.createElement(t.code,null,"useSetRecoilState()"))," setter 함수만을 반환한다."),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,r.createElement(t.code,null,"useResetRecoilState()"))," default값으로 초기화해주는 함수이다."),"\n",r.createElement("br"),"\n",r.createElement("br"),"\n",r.createElement(t.h1,{id:"selector",style:{position:"relative"}},r.createElement(t.a,{href:"#selector","aria-label":"selector permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"selector"),"\n",r.createElement(t.p,null,r.createElement(t.strong,null,"Selector"),"는 atom이나 다른 selector를 기반으로 파생된 상태를 만드는 순수 함수로 redux의 ",r.createElement(t.code,null,"reselect"),"와 닮아있다."),"\n",r.createElement(t.p,null,"의존하는 atom 또는 selector가 업데이트되면 하위의 selector 함수도 다시 실행된다. 컴포넌트들은 selector를 atom처럼 구독할 수 있으며 selector가 변경되면 컴포넌트들도 다시 렌더링 된다."),"\n",r.createElement(t.p,null,"selector를 사용해 전체 todo리스트에서 완료된 항목만을 필터링한 todo리스트를 반환해보자."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"import { atom, selector } from 'recoil';\n\ntype Todo = { \n    id: number; \n    text: string; \n    isComplete: boolean \n};\n\nconst todoListState = atom<Todo[]>({\n  key: 'todoListState',\n  default: [],\n});\n\nconst completedTodosSelector = selector({\n  key: 'completedTodosSelector',\n  get: ({ get }) => {\n    const todoList = get(todoListState);\n        return todoList.filter((todo) => todo.isComplete);\n  },\n});\n")),"\n",r.createElement(t.p,null,"atom과 마찬가지로 고유 ",r.createElement(t.code,null,"key")," 값이 필요하며, get 매서드를 통해 사용할 값을 반환한다."),"\n",r.createElement("br"),"\n",r.createElement(t.p,null,r.createElement(t.code,null,"completedTodosSelector")," 내부에서 ",r.createElement(t.code,null,"todoListState"),"를 의존하고 있기 때문에 ",r.createElement(t.code,null,"todoListState"),"의 값이 변하면 해당 selector도 재실행된다."),"\n",r.createElement("br"),"\n",r.createElement("br"),"\n",r.createElement(t.h1,{id:"-쓰기-가능한-selector",style:{position:"relative"}},r.createElement(t.a,{href:"#-%EC%93%B0%EA%B8%B0-%EA%B0%80%EB%8A%A5%ED%95%9C-selector","aria-label":" 쓰기 가능한 selector permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"➕ 쓰기 가능한 selector"),"\n",r.createElement(t.p,null,"recoil ",r.createElement(t.code,null,"select"),"의 특이한 점은 ",r.createElement(t.code,null,"set")," 매서드도 제공해준다는 점이다. ",r.createElement(t.code,null,"set")," 속성이 설정되면 ",r.createElement(t.code,null,"select")," 는 쓰기 가능한 상태를 반환해준다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"function selector<T>({\n  key: string,\n\n  get: ({\n    get: GetRecoilValue\n  }) => T | Promise<T> | RecoilValue<T>,\n\n  set?: (\n    {\n      get: GetRecoilValue,\n      set: SetRecoilState,\n      reset: ResetRecoilState,\n    },\n    newValue: T | DefaultValue,\n  ) => void,\n\n  dangerouslyAllowMutability?: boolean,\n})\n")),"\n",r.createElement(t.p,null,"selector의 구조를 살펴보면, ",r.createElement(t.code,null,"set"),"의 새로운 값은 두 번째 매개변수인 ",r.createElement(t.code,null,"newValue"),"를 통해 받아올 수 있다. 이 ",r.createElement(t.code,null,"newValue"),"는 ",r.createElement(t.code,null,"T | DefaultValue"),"로 정의되어있는 것을 볼 수 있는데, 타입이 제너럴",r.createElement(t.code,null,"<T>"),"일때는 setter함수를 통해 값을 업데이트하는 상황이며 DefaultValue일 때는 ",r.createElement(t.code,null,"useResetRecoilState"),"를 통해 값을 초기화하는 상황이다."),"\n",r.createElement(t.p,null,"따라서, selector를 통해 데이터를 변환해야 하는 상황일 때는 아래와 같이 현재 값을 업데이트하는 상황인지 초기화하는 상황인지를 판단하여 로직을 적용해야 한다."),"\n",r.createElement(t.pre,null,r.createElement(t.code,null,"const transformSelector = selector({\n  key: 'TransformSelector',\n  get: ({get}) => get(myAtom) * 100,\n  set: ({set}, newValue) =>\n    set(myAtom, newValue instanceof DefaultValue ? newValue : newValue / 100),\n});\n")),"\n",r.createElement("br"),"\n",r.createElement("br"),"\n",r.createElement(t.h1,{id:"마치며",style:{position:"relative"}},r.createElement(t.a,{href:"#%EB%A7%88%EC%B9%98%EB%A9%B0","aria-label":"마치며 permalink",className:"anchor before"},r.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"마치며"),"\n",r.createElement(t.p,null,"recoil의 핵심 개념 두 개를 알아보았다. ",r.createElement(t.code,null,"atom")," 과 ",r.createElement(t.code,null,"selector")," 가 어떤 건지 이해했다면 recoil을 사용할 준비가 다 된 것이다. 개인적으로는 recoil을 사용하면서 단순한 구성과 사용법이 바로 체감되어 매우 만족스러웠다."),"\n",r.createElement(t.p,null,"redux를 사용하면서 불필요한 보일러 플레이트 코드를 줄이고 싶다는 생각이 들었다면, redux가 아닌 새로운 상태 관리 라이브러리를 다뤄보고 싶었다면 recoil을 도입해볼 것을 추천한다."),"\n",r.createElement("br"),"\n",r.createElement("br"),"\n",r.createElement(t.blockquote,null,"\n",r.createElement(t.p,null,r.createElement(t.em,null,"Recoil은 동시성 모드(Concurrent Mode)를 비롯한 다른 새로운 React의 기능들과의 호환 가능성도 갖습니다.")),"\n"),"\n",r.createElement(t.p,null,"더 나아가서, 지난 3월 말 React 18 버전이 발표되었다. React 18 버전에서의 핵심 키워드는 ",r.createElement(t.strong,null,"concurrent(동시성)")," 이다. 이 concurrent mode는 사용자 경험 향상을 위해 react가 제시하는 새로운 개발 패러다임이며 아마도 개발 프로세스에 큰 변동을 야기할 것이라고 생각한다. concurrent mode와 관련해 v18에서 정식으로 추가된 기능이 ",r.createElement(t.strong,null,"Suspense"),"이다. recoil은 데이터 처리 시 이 Suspense와 함께 동작하도록 디자인되어있다."),"\n",r.createElement(t.p,null,"이 부분에 관해서는 ",r.createElement(t.strong,null,"“recoil과 비동기 데이터 호출”")," 포스팅에서 보다 자세하게 다뤄보도록 하겠다. (사실 포스팅 하나에 전부 넣고 싶었지만 생각보다 길어졌다🙄)"))}var a=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,n.ah)(),e.components);return t?r.createElement(t,e,r.createElement(c,e)):c(e)},o=l(1883),m=l(157),s=l(588),u=l(8709),i=l(9357),E=l(7174),d=l(4462),p=l(8336),h=l(1075);const f={img:e=>{let{src:t,alt:l}=e;return r.createElement("img",{src:t,alt:l,className:"m-auto md:w-3/4"})},pre:d.d,code:e=>r.createElement("code",Object.assign({},e,{className:"bg-background-primary text-accent-default bg-opacity-70"}))},g=e=>{var t;let{data:{previous:l,next:c,site:a,mdx:i},location:d,children:g}=e;const v=(null===(t=a.siteMetadata)||void 0===t?void 0:t.title)||"Title";return r.createElement(u.Z,{location:d,title:v},r.createElement("article",{className:"blog-post px-8 pt-10",itemScope:!0,itemType:"http://schema.org/Article"},r.createElement("header",{className:"text-center py-14"},r.createElement("h1",{itemProp:"headline"},i.frontmatter.title),r.createElement("p",{className:"text-accent-default text-xs mt-8"},i.frontmatter.date)),r.createElement("section",{className:"h-fit my-28 text-text-default",itemProp:"articleBody"},r.createElement(n.Zo,{components:f},g)),r.createElement(E.a,null,i.frontmatter.tags.map((e=>r.createElement(E.V,{key:e,text:e})))),r.createElement("hr",{className:"my-10"}),r.createElement(p.Z),r.createElement("footer")),r.createElement("nav",{className:"blog-post-nav px-8 mt-8"},r.createElement("ul",{className:"flex flex-wrap justify-between list-none p-0 text-text-default"},l?r.createElement(o.Link,{to:l.fields.slug,rel:"prev"},r.createElement("li",{className:"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3"},r.createElement(s.D,{size:22,className:"text-accent-default"}),r.createElement("p",{className:"max-w-[28rem]"},l.frontmatter.title))):r.createElement("div"),c&&r.createElement(o.Link,{to:c.fields.slug,rel:"next"},r.createElement("li",{className:"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3"},r.createElement("p",{className:"max-w-[28rem]"},c.frontmatter.title),r.createElement(m.M,{size:22,className:"text-accent-default"}))))),r.createElement(h.Z,{contents:i.tableOfContents}))},v=e=>{let{data:{mdx:t}}=e;return r.createElement(i.Z,{title:t.frontmatter.title,description:t.frontmatter.description||t.excerpt})};function b(e){return r.createElement(g,e,r.createElement(a,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-content-blog-react-lets-explore-recoil-mdx-d972a969a275afe09950.js.map