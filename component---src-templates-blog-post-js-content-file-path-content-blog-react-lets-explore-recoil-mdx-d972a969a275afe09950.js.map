{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-content-blog-react-lets-explore-recoil-mdx-d972a969a275afe09950.js","mappings":"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","sources":["webpack://leego.dev.log/./content/blog/REACT/lets-explore-recoil.mdx","webpack://leego.dev.log/./src/templates/blog-post.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    h1: \"h1\",\n    a: \"a\",\n    span: \"span\",\n    pre: \"pre\",\n    code: \"code\",\n    em: \"em\",\n    blockquote: \"blockquote\",\n    br: \"br\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"이제까지의 프로젝트에는 상태 관리 라이브러리로 항상 \", React.createElement(_components.strong, null, \"Redux\"), \"를 사용했었는데, 그 이유는 단순하게 대부분의 사용자들이 redux를 사용했고, 사용자들이 가장 많이 사용하는 라이브러리 = 좋은 라이브러리라는 생각이 있었기 때문이다.\"), \"\\n\", React.createElement(_components.p, null, \"Redux는 한때 너무 많은 양의 보일러 플레이트 코드를 작성해야 한다는 단점을 가지고 있었지만, \", React.createElement(_components.strong, null, \"Redux-toolkit의\"), \" 등장으로 그 단점을 많이 보완되었다. 그럼에도 불구하고, 어떤 프로젝트에서는 전역 상태 관리를 위해 Redux를 설치하는 것이 너무 과하다고 느껴질 때가 있다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"다른-대안-context-api\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%8B%A4%EB%A5%B8-%EB%8C%80%EC%95%88-context-api\",\n    \"aria-label\": \"다른 대안 context api permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"다른 대안, context API\"), \"\\n\", React.createElement(_components.p, null, \"라이브러리를 추가적으로 설치하지 않고 \", React.createElement(_components.strong, null, \"context API\"), \"를 사용하는것은 어떨까?\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"context API\"), \"는 일일히 props를 넘겨주지 않고도 컴포넌트 트리 전체에 데이터를 제공할 수 있는 리액트의 내장 툴이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const MyContext = React.createContext(defaultValue);\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"context\"), \"를 생성해서\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"<MyContext.Provider value={/* 어떤 값 */}>\\n        {children} //value가 전달되는 곳.\\n</MyContext.Provider>\\n\")), \"\\n\", React.createElement(_components.p, null, \"위와 같이 컴포넌트를 \", React.createElement(_components.code, null, \"Provider\"), \"로 감싸주면, 그 하위에 있는 모든 컴포넌트들은 이 React Context에 저장되어 있는 전역 데이터에 접근할 수 있다.\"), \"\\n\", React.createElement(_components.p, null, \"다만 \", React.createElement(_components.code, null, \"context\"), \"에서는 \", React.createElement(_components.code, null, \"Provider\"), \" 하위에서 \", React.createElement(_components.code, null, \"context\"), \"를 구독하는 모든 컴포넌트는 \", React.createElement(_components.code, null, \"Provider\"), \"의 value prop가 바뀔 때마다 다시 렌더링 된다. 따라서 \", React.createElement(_components.code, null, \"context\"), \"를 관심사에 따라 나눠서 관리하거나 따로 최적화를 해줘야한다.\"), \"\\n\", React.createElement(_components.p, null, \"공식 홈페이지의 \", React.createElement(_components.strong, null, React.createElement(_components.a, {\n    href: \"https://ko.reactjs.org/docs/context.html#when-to-use-context\"\n  }, \"언제 context를 써야 할까\")), \" 를 보면 \", React.createElement(_components.code, null, \"context\"), \"를 현재 로그인한 유저, 테마, 선호하는 언어 등의 데이터 공유 시에 사용할 것을 추천한다. 엄밀히 말하면 \", React.createElement(_components.code, null, \"context\"), \"는 \", React.createElement(_components.strong, null, \"전역적으로 데이터를 제공해주는\"), \" 툴이지 \", React.createElement(_components.strong, null, \"전역 상태를 관리하는\"), \" 툴이 아니다. redux의 대체 대상으로 고려하기에는 그 역할이 다르다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"recoil을-써보자\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#recoil%EC%9D%84-%EC%8D%A8%EB%B3%B4%EC%9E%90\",\n    \"aria-label\": \"recoil을 써보자 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"recoil을 써보자\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"recoil\"), \"은 이러한 \", React.createElement(_components.strong, null, \"전역 상태 관리 문제에 대하여 react 팀에서 리액트다운 방법으로 개선하기 위하여 만든 상태 관리 라이브러리\"), \"이다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"주의할 점은 아직 알파버전만 나온 상태라는 것이다. 이 글을 작성한 시점을 기준으로 현재 \", React.createElement(_components.code, null, \"0.7.4\"), \" 버전까지 나와있다. 따라서 실무나 규모가 큰 프로젝트에서 사용하기에는 위험부담이 있으므로 만약 도입하고자 한다면 신중하게 고민해야 한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://github.com/facebookexperimental/Recoil/issues/1495\"\n  }, \"What's happening in the future of recoil\")), \"\\n\", React.createElement(_components.p, null, \"recoil의 메이저 버전이 언제 나오는지에 대한 질문에 \", React.createElement(_components.em, null, \"\\\"we keep the project in an experimental status today until we are confident in a solution compatible with all upcoming React features.\\\"\"), \" 라고 답한 것을 봐서는 아마도 당분간은 알파버전을 유지할 것 같다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"recoil의-개발-동기\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#recoil%EC%9D%98-%EA%B0%9C%EB%B0%9C-%EB%8F%99%EA%B8%B0\",\n    \"aria-label\": \"recoil의 개발 동기 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"recoil의 개발 동기\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://recoiljs.org/ko/docs/introduction/motivation\",\n    title: \"recoil개발동기\"\n  }, \"recoil 공식페이지\"), \"에서는 recoil를 개발하게 된 계기를 다음과 같이 설명했다.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"호환성 및 단순함을 이유로 외부의 글로벌 상태 관리 라이브러리보다는 React 자체에 내장된 상태 관리 기능을 사용하는 것이 가장 좋다. 그러나 React는 다음과 같은 한계가 있다.\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"* 컴포넌트의 상태는 공통된 상위 요소까지 끌어올려야만 공유될 수 있으며, 이 과정에서 거대한 트리가 다시 렌더링 되는 효과를 야기하기도 한다.\"), React.createElement(_components.br), \"\\n\", React.createElement(_components.em, null, \"* Context는 단일 값만 저장할 수 있으며, 자체 소비자(consumer)를 가지는 여러 값들의 집합을 담을 수는 없다. 이 두 가지 특성이 트리의 최상단(state가 존재하는 곳)부터 트리의 말단(state가 사용되는 곳)까지의 코드 분할을 어렵게 한다.\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"우리는 API와 의미 및 동작을 \", React.createElement(_components.strong, null, \"가능한 React 답게 유지\"), \"하면서 이것을 개선하고자 한다.\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"recoil의 개념은 매우 단순하다. 가능한 React답게 동작하는 것을 목표로 한 만큼 react hook과 사용법이 매우 닮아있다. 따라서 기존의 react hook을 사용한 개발자라면 recoil도 곧 잘 다룰 수 있을 것이다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"초기-셋팅\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%B4%88%EA%B8%B0-%EC%85%8B%ED%8C%85\",\n    \"aria-label\": \"초기 셋팅 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"초기 셋팅\"), \"\\n\", React.createElement(_components.p, null, \"먼저 초기 셋팅을 해보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"npm install recoil\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"recoil을 설치해준 후,\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"import React from 'react';\\nimport { RecoilRoot } from 'recoil';\\n\\nfunction Root() {\\n  return (\\n    <RecoilRoot>\\n      <App />\\n    </RecoilRoot>\\n  );\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"최상위 컴포넌트를 \", React.createElement(_components.code, null, \"RecoilRoot\"), \" 로 감싸주면 모든 준비가 끝난다.\"), \"\\n\", React.createElement(_components.p, null, \"redux를 사용할 때처럼 \", React.createElement(_components.code, null, \"<Provider store={store}>\"), \" store를 props로 넘겨주지 않아도 된다.\"), \"\\n\", React.createElement(_components.p, null, \"이제 \", React.createElement(_components.code, null, \"atoms\"), \" 과 \", React.createElement(_components.code, null, \"selector\"), \" 의 개념을 이해해보자.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"atoms\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#atoms\",\n    \"aria-label\": \"atoms permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"atoms\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"atoms\"), \" 은 상태의 단위로 업데이트와 구독이 가능하다. atom이 업데이트되면 해당 atom을 구독한 컴포넌트는 모두 다시 렌더링 된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const wordState = atom<string>({\\n  key: \\\"wordState\\\",\\n  default: \\\"\\\",\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"atom\"), \" 은 고유의 key값을 가진다. 상태를 컴포넌트에서 사용할 때 이 key값으로 식별한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"default\"), \" 는 말 그대로 초기값이다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const [word, setWord] = useRecoilState(wordState);\\n\")), \"\\n\", React.createElement(_components.p, null, \"사용법도 간단하다. \", React.createElement(_components.code, null, \"useState\"), \" 와 동일한 방식으로 사용해주면 된다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const onClick = (value: string) => {\\n      if (word.length >= 5) {\\n        return;\\n      }\\n      setWord(word + value);\\n    };\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"word\"), \" 는 상태값, \", React.createElement(_components.code, null, \"setWord\"), \" 는 setter함수이다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"이밖에도 값만을, 또는 setter만을 반환하는 hook이 있으니 상황에 따라 적절하게 사용하면 된다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, React.createElement(_components.code, null, \"useRecoilState()\")), \" atom의 값을 구독하여 업데이트할 수 있는 hook. \", React.createElement(_components.code, null, \"useState\"), \"와 동일한 형식을 가진다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, React.createElement(_components.code, null, \"useRecoilValue()\")), \" atom의 값만을 반환한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, React.createElement(_components.code, null, \"useSetRecoilState()\")), \" setter 함수만을 반환한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, React.createElement(_components.code, null, \"useResetRecoilState()\")), \" default값으로 초기화해주는 함수이다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"selector\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#selector\",\n    \"aria-label\": \"selector permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"selector\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"Selector\"), \"는 atom이나 다른 selector를 기반으로 파생된 상태를 만드는 순수 함수로 redux의 \", React.createElement(_components.code, null, \"reselect\"), \"와 닮아있다.\"), \"\\n\", React.createElement(_components.p, null, \"의존하는 atom 또는 selector가 업데이트되면 하위의 selector 함수도 다시 실행된다. 컴포넌트들은 selector를 atom처럼 구독할 수 있으며 selector가 변경되면 컴포넌트들도 다시 렌더링 된다.\"), \"\\n\", React.createElement(_components.p, null, \"selector를 사용해 전체 todo리스트에서 완료된 항목만을 필터링한 todo리스트를 반환해보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"import { atom, selector } from 'recoil';\\n\\ntype Todo = { \\n    id: number; \\n    text: string; \\n    isComplete: boolean \\n};\\n\\nconst todoListState = atom<Todo[]>({\\n  key: 'todoListState',\\n  default: [],\\n});\\n\\nconst completedTodosSelector = selector({\\n  key: 'completedTodosSelector',\\n  get: ({ get }) => {\\n    const todoList = get(todoListState);\\n        return todoList.filter((todo) => todo.isComplete);\\n  },\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"atom과 마찬가지로 고유 \", React.createElement(_components.code, null, \"key\"), \" 값이 필요하며, get 매서드를 통해 사용할 값을 반환한다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"completedTodosSelector\"), \" 내부에서 \", React.createElement(_components.code, null, \"todoListState\"), \"를 의존하고 있기 때문에 \", React.createElement(_components.code, null, \"todoListState\"), \"의 값이 변하면 해당 selector도 재실행된다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"-쓰기-가능한-selector\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#-%EC%93%B0%EA%B8%B0-%EA%B0%80%EB%8A%A5%ED%95%9C-selector\",\n    \"aria-label\": \" 쓰기 가능한 selector permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"➕ 쓰기 가능한 selector\"), \"\\n\", React.createElement(_components.p, null, \"recoil \", React.createElement(_components.code, null, \"select\"), \"의 특이한 점은 \", React.createElement(_components.code, null, \"set\"), \" 매서드도 제공해준다는 점이다. \", React.createElement(_components.code, null, \"set\"), \" 속성이 설정되면 \", React.createElement(_components.code, null, \"select\"), \" 는 쓰기 가능한 상태를 반환해준다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"function selector<T>({\\n  key: string,\\n\\n  get: ({\\n    get: GetRecoilValue\\n  }) => T | Promise<T> | RecoilValue<T>,\\n\\n  set?: (\\n    {\\n      get: GetRecoilValue,\\n      set: SetRecoilState,\\n      reset: ResetRecoilState,\\n    },\\n    newValue: T | DefaultValue,\\n  ) => void,\\n\\n  dangerouslyAllowMutability?: boolean,\\n})\\n\")), \"\\n\", React.createElement(_components.p, null, \"selector의 구조를 살펴보면, \", React.createElement(_components.code, null, \"set\"), \"의 새로운 값은 두 번째 매개변수인 \", React.createElement(_components.code, null, \"newValue\"), \"를 통해 받아올 수 있다. 이 \", React.createElement(_components.code, null, \"newValue\"), \"는 \", React.createElement(_components.code, null, \"T | DefaultValue\"), \"로 정의되어있는 것을 볼 수 있는데, 타입이 제너럴\", React.createElement(_components.code, null, \"<T>\"), \"일때는 setter함수를 통해 값을 업데이트하는 상황이며 DefaultValue일 때는 \", React.createElement(_components.code, null, \"useResetRecoilState\"), \"를 통해 값을 초기화하는 상황이다.\"), \"\\n\", React.createElement(_components.p, null, \"따라서, selector를 통해 데이터를 변환해야 하는 상황일 때는 아래와 같이 현재 값을 업데이트하는 상황인지 초기화하는 상황인지를 판단하여 로직을 적용해야 한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const transformSelector = selector({\\n  key: 'TransformSelector',\\n  get: ({get}) => get(myAtom) * 100,\\n  set: ({set}, newValue) =>\\n    set(myAtom, newValue instanceof DefaultValue ? newValue : newValue / 100),\\n});\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"마치며\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%A7%88%EC%B9%98%EB%A9%B0\",\n    \"aria-label\": \"마치며 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"마치며\"), \"\\n\", React.createElement(_components.p, null, \"recoil의 핵심 개념 두 개를 알아보았다. \", React.createElement(_components.code, null, \"atom\"), \" 과 \", React.createElement(_components.code, null, \"selector\"), \" 가 어떤 건지 이해했다면 recoil을 사용할 준비가 다 된 것이다. 개인적으로는 recoil을 사용하면서 단순한 구성과 사용법이 바로 체감되어 매우 만족스러웠다.\"), \"\\n\", React.createElement(_components.p, null, \"redux를 사용하면서 불필요한 보일러 플레이트 코드를 줄이고 싶다는 생각이 들었다면, redux가 아닌 새로운 상태 관리 라이브러리를 다뤄보고 싶었다면 recoil을 도입해볼 것을 추천한다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"Recoil은 동시성 모드(Concurrent Mode)를 비롯한 다른 새로운 React의 기능들과의 호환 가능성도 갖습니다.\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"더 나아가서, 지난 3월 말 React 18 버전이 발표되었다. React 18 버전에서의 핵심 키워드는 \", React.createElement(_components.strong, null, \"concurrent(동시성)\"), \" 이다. 이 concurrent mode는 사용자 경험 향상을 위해 react가 제시하는 새로운 개발 패러다임이며 아마도 개발 프로세스에 큰 변동을 야기할 것이라고 생각한다. concurrent mode와 관련해 v18에서 정식으로 추가된 기능이 \", React.createElement(_components.strong, null, \"Suspense\"), \"이다. recoil은 데이터 처리 시 이 Suspense와 함께 동작하도록 디자인되어있다.\"), \"\\n\", React.createElement(_components.p, null, \"이 부분에 관해서는 \", React.createElement(_components.strong, null, \"“recoil과 비동기 데이터 호출”\"), \" 포스팅에서 보다 자세하게 다뤄보도록 하겠다. (사실 포스팅 하나에 전부 넣고 싶었지만 생각보다 길어졌다🙄)\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/ego/Documents/go/ego-blog/content/blog/REACT/lets-explore-recoil.mdx\";\nimport * as React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport {HiChevronRight} from \"@react-icons/all-files/hi/HiChevronRight\";\nimport {HiChevronLeft} from \"@react-icons/all-files/hi/HiChevronLeft\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport {Tag, TagBox} from \"../components/Tag\";\nimport {CodeBlock} from \"../components/Block/CodeBlock\";\nimport Comment from \"../components/Post/Comment\";\nimport TableOfContents from \"../components/TableOfContents/TableOfContents\";\nconst components = {\n  img: ({src, alt}) => React.createElement(\"img\", {\n    src: src,\n    alt: alt,\n    className: \"m-auto md:w-3/4\"\n  }),\n  pre: CodeBlock,\n  code: props => React.createElement(\"code\", Object.assign({}, props, {\n    className: \"bg-background-primary text-accent-default bg-opacity-70\"\n  }))\n};\nconst BlogPostTemplate = ({data: {previous, next, site, mdx: post}, location, children}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(\"article\", {\n    className: \"blog-post px-8 pt-10\",\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(\"header\", {\n    className: \"text-center py-14\"\n  }, React.createElement(\"h1\", {\n    itemProp: \"headline\"\n  }, post.frontmatter.title), React.createElement(\"p\", {\n    className: \"text-accent-default text-xs mt-8\"\n  }, post.frontmatter.date)), React.createElement(\"section\", {\n    className: \"h-fit my-28 text-text-default\",\n    itemProp: \"articleBody\"\n  }, React.createElement(MDXProvider, {\n    components: components\n  }, children)), React.createElement(TagBox, null, post.frontmatter.tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    text: tag\n  }))), React.createElement(\"hr\", {\n    className: \"my-10\"\n  }), React.createElement(Comment), React.createElement(\"footer\")), React.createElement(\"nav\", {\n    className: \"blog-post-nav px-8 mt-8\"\n  }, React.createElement(\"ul\", {\n    className: \"flex flex-wrap justify-between list-none p-0 text-text-default\"\n  }, previous ? React.createElement(Link, {\n    to: previous.fields.slug,\n    rel: \"prev\"\n  }, React.createElement(\"li\", {\n    className: \"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3\"\n  }, React.createElement(HiChevronLeft, {\n    size: 22,\n    className: \"text-accent-default\"\n  }), React.createElement(\"p\", {\n    className: \"max-w-[28rem]\"\n  }, previous.frontmatter.title))) : React.createElement(\"div\"), next && React.createElement(Link, {\n    to: next.fields.slug,\n    rel: \"next\"\n  }, React.createElement(\"li\", {\n    className: \"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3\"\n  }, React.createElement(\"p\", {\n    className: \"max-w-[28rem]\"\n  }, next.frontmatter.title), React.createElement(HiChevronRight, {\n    size: 22,\n    className: \"text-accent-default\"\n  }))))), React.createElement(TableOfContents, {\n    contents: post.tableOfContents\n  }));\n};\nexport const Head = ({data: {mdx: post}}) => {\n  return React.createElement(Seo, {\n    title: post.frontmatter.title,\n    description: post.frontmatter.description || post.excerpt\n  });\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    mdx(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"YYYY.MM.DD\")\n        description\n        tags\n      }\n    }\n    previous: mdx(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: mdx(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","strong","h1","a","span","pre","code","em","blockquote","br","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","title","wrapper","MDXLayout","img","_ref","src","alt","CodeBlock","BlogPostTemplate","_ref2","_site$siteMetadata","data","previous","next","site","mdx","post","location","children","siteTitle","siteMetadata","Layout","itemScope","itemType","itemProp","frontmatter","date","MDXProvider","TagBox","tags","map","tag","Tag","key","text","Comment","Link","to","fields","slug","rel","HiChevronLeft","size","HiChevronRight","TableOfContents","contents","tableOfContents","Head","_ref3","Seo","description","excerpt","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}