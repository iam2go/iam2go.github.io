"use strict";(self.webpackChunkleego_dev_log=self.webpackChunkleego_dev_log||[]).push([[791],{7985:function(e,t,n){n.r(t),n.d(t,{Head:function(){return S},default:function(){return g}});var l=n(1151),a=n(7294);function o(e){const t=Object.assign({p:"p",pre:"pre",code:"code",h1:"h1",a:"a",span:"span",h2:"h2"},(0,l.ah)(),e.components);return a.createElement(a.Fragment,null,a.createElement(t.p,null,"이전 포스팅에서 context API, redux를 사용한 모달 관리에 대해서 소개했었다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,'// store/modalSlice.js\n\nimport { createSlice } from "@reduxjs/toolkit";\n\nconst initialState = [];\n\nexport const modalSelector = (state) => state.modal;\n\nexport const modalSlice = createSlice({\n  name: "modal",\n  initialState,\n  reducers: {\n    openModal: (state, action) => {\n      const { type, props } = action.payload;\n      return state.concat({ type, props });\n    },\n    closeModal: (state, action) => {\n      state.pop();\n    },\n  },\n});\n\nexport const { openModal, closeModal } = modalSlice.actions;\n')),"\n",a.createElement(t.p,null,"모달이 닫히면 해당 모달의 상태는 리셋되기 때문에 굳이 ",a.createElement(t.code,null,"initalState")," 의 모달 상태를 들고 있을 이유가 없다 판단했고, 현재 열려있는 모달의 상태만을 관리하는 방식을 선택했다.\n구체적으로는, ",a.createElement(t.code,null,"type")," 과 ",a.createElement(t.code,null,"props")," 를 가진 모달 객체를 배열에 차곡차곡 쌓아주고, 배열에 담긴 모달만을 랜더링 하는 방식으로 구현했다."),"\n",a.createElement(t.p,null,"최근 새로운 프로젝트의 초기 셋팅을 맡았는데, 이 프로젝트에 전역 상태 관리 라이브러리로 ",a.createElement(t.code,null,"recoil"),"을 도입해보기로 했다."),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"redux")," 가 중앙집중식으로 상태를 관리했다면 ",a.createElement(t.code,null,"recoil")," 은 ",a.createElement(t.code,null,"Atom")," 이라는 작은 단위의 상태를 만들어 분산식으로 상태를 관리한다. 위에서 설명한 방식은 여러 모달 객체를 하나의 배열 안에 전부 가지고 있는 것이기 때문에 ",a.createElement(t.code,null,"recoil")," 의 지향점과 맞지 않는다고 판단하여 다른 방식을 고려하게 되었다."),"\n",a.createElement(t.p,null,"(정확히는 기존의 모달 관리 로직의 큰 틀은 유지하되, 상태 관리 방식만 recoil에 맞춰 변경하기로 했다.)"),"\n",a.createElement("br"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"recoil"),"의 지향점에 따른다면, 모달마다 상태를 저장하는 개별 atom을 가지고 있어야 하겠다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,'const firstModalState = atom<Modal>({\n    key: "firstModal",\n    default: {\n    params: null\n  }\n});\n\nconst secondModalState = atom<Modal>({\n    key: "secondeModal",\n    default: {\n    params: null\n  }\n});\n')),"\n",a.createElement(t.p,null,"하지만 이렇게 개별로 생성해줘야 한다면, 구조 변경이 번거롭고, 무엇보다 key관리가 힘들다. ",a.createElement(t.code,null,"recoil"),"에서는 이렇게 형태가 동일한 여러 개의 상태가 필요한 경우를 위해 ",a.createElement(t.code,null,"atomFamily"),"를 제공한다."),"\n",a.createElement("br"),"\n",a.createElement("br"),"\n",a.createElement(t.h1,{id:"atomfamily",style:{position:"relative"}},a.createElement(t.a,{href:"#atomfamily","aria-label":"atomfamily permalink",className:"anchor before"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"atomFamily"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"atomFamily"),"는 쉽게 말해 ",a.createElement(t.code,null,"atom"),"들의 모음이다. 기본적으로 매개변수를 받아 ",a.createElement(t.code,null,"atom"),"을 리턴하며 이때 리턴되는 ",a.createElement(t.code,null,"atom"),"은 독립적인 atom state를 가진다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"const modalState = atomFamily<Modal, string>({\n  key: 'modalState',\n  default: (id) => ({\n    id,\n    params: null\n  })\n")),"\n",a.createElement(t.p,null,"만약 상태를 구독한다면 아래와 같다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"const {isOpen, params} = useRecoilValue(madalState('first'));\n")),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"atomFamily"),"를 호출할 때 넣어주는 매개변수가 생성되는 ",a.createElement(t.code,null,"atom"),"의 고유한 key값이 되는 셈이다."),"\n",a.createElement(t.p,null,"각각의 모달 상태는 ",a.createElement(t.code,null,"atomFamily"),"를 통해 관리한다."),"\n",a.createElement("br"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"ModalContainer"),"에서 열려있는 모달만 랜더링해 줄 것이기 때문에, 열려있는 모달을 담은 배열이 추가로 필요하다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"export const modalListState = atom<string[]>({\n  key: 'modalListState',\n  default: []\n});\n")),"\n",a.createElement(t.p,null,"이 배열에는 모달의 ",a.createElement(t.code,null,"id"),"값만을 넣어준다."),"\n",a.createElement("br"),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"// ModalContainer.ts\n\nconst MODAL_COMPONENTS: Record<string, () => React.ReactElement> = {\n  test: TestModal,\n  test2: Test2Modal\n};\n\nfunction ModalContainer() {\n  const modalList = useRecoilValue(modalListState);\n  const renderModal = modalList.map((id) => {\n    const ModalComponent = MODAL_COMPONENTS[id];\n    return <ModalComponent key={id} />;\n  });\n  return createPortal(\n    <>\n      {renderModal}\n    </>,\n    document.getElementById('modal') as HTMLElement\n  );\n}\n\nexport default ModalContainer;\n")),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"ModalContainer"),"는 기존과 크게 달라진 점은 없다."),"\n",a.createElement("br"),"\n",a.createElement("br"),"\n",a.createElement(t.h1,{id:"selectorfamily",style:{position:"relative"}},a.createElement(t.a,{href:"#selectorfamily","aria-label":"selectorfamily permalink",className:"anchor before"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"selectorFamily"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"selctor"),"는 redux의 ",a.createElement(t.code,null,"reselect"),"와 유사하게 ",a.createElement(t.code,null,"atom"),"이나 다른 ",a.createElement(t.code,null,"selector"),"를 기반으로 파생된 상태를 만든다. 하지만 recoil의 ",a.createElement(t.code,null,"selector"),"는 ",a.createElement(t.code,null,"set")," 매서드를 통해 값의 변경도 가능하다."),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"atomFamily"),"와 동일하게 ",a.createElement(t.code,null,"selectorFamily"),"는 ",a.createElement(t.code,null,"selector"),"의 모음으로, 매개변수를 받아 ",a.createElement(t.code,null,"selector"),"를 리턴한다."),"\n",a.createElement(t.p,null,"여기서는 ",a.createElement(t.code,null,"selectorFamily"),"를 통해 열려있는 모달 ID를 담은 ",a.createElement(t.code,null,"modalListState"),"와 각각의 모달 상태값을 담은 ",a.createElement(t.code,null,"modalState"),"를 동시에 관리해 줄 것이다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"export const modalSelector = selectorFamily<Modal, string>({\n  key: 'modalSelector',\n  get:\n    (id) => get(modalState(id)),\n  set:\n    (id) =>\n    ({ get, set, reset }, newValue) => {\n      if (newValue instanceof DefaultValue) {\n        set(modalListState, (prev) => prev.filter((modalId) => modalId !== id));\n        reset(modalState(id));\n        return;\n      }\n\n      set(modalState(id), newValue);\n\n      if (get(modalListState).find((id) => id === newValue.id)) return;\n      set(modalListState, (prev) => [...prev, newValue.id]);\n    }\n});\n")),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"get"),"을 통해 매개변수를 key값으로 하는 다이얼로그의 상태를 가져온다."),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"set"),"을 통해서는 새로운 상태값으로 업데이트해주거나, 상태를 리셋해 준다."),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"set"),"에서는 값을 업데이트할 때와 초기화할 때 모두 두 번째 매개변수인 ",a.createElement(t.code,null,"newValue"),"로 변경할 값을 받아온다.\n따라서 ",a.createElement(t.code,null,"newValue")," 의 타입이 ",a.createElement(t.code,null,"DefaultValue")," 인지를 확인하여 지금 값을 업데이트하는 상황인지, 초기화하는 상황인지를 판단해야 한다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"if (newValue instanceof DefaultValue) {\n       set(modalListState, (prev) => prev.filter((modalId) => modalId !== id));\n       reset(modalState(id));\n       return;\n}\n")),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"newValue")," 의 타입이 ",a.createElement(t.code,null,"DefaultValue"),"라면 ",a.createElement(t.code,null,"useResetRecoilState")," 를 통해 값을 초기화하는 상황이다."),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"modalListState")," 에서 매개변수로 받은 id의 값을 제거해 준 후, 해당 모달의 상태를 reset 시켜준다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"set(modalState(id), newValue);\n\nif (get(modalListState).find((id) => id === newValue.id)) return;\nset(modalListState, (prev) => [...prev, newValue.id]);\n")),"\n",a.createElement(t.p,null,"값을 업데이트해주는 상황 즉, 모달을 여는 상황이라면"),"\n",a.createElement(t.p,null,"먼저 새로운 값으로 모달의 상태를 업데이트해주고, ",a.createElement(t.code,null,"modalListState"),"에 id를 넣어준다."),"\n",a.createElement("br"),"\n",a.createElement("br"),"\n",a.createElement(t.h1,{id:"usemodal",style:{position:"relative"}},a.createElement(t.a,{href:"#usemodal","aria-label":"usemodal permalink",className:"anchor before"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"useModal"),"\n",a.createElement(t.p,null,"모달을 열고 닫는 로직을 공통으로 사용할 수 있도록 ",a.createElement(t.code,null,"useModal")," 커스텀 훅을 만들어 주었다."),"\n",a.createElement("br"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"useModal")," 구현시 두 가지 방식을 놓고 고민했었는데,"),"\n",a.createElement(t.p,null,"1️. ",a.createElement(t.code,null,"useModal"),"호출시 모달의 ",a.createElement(t.code,null,"id"),"를 전달받아 해당 ",a.createElement(t.code,null,"id"),"를 가진 모달에 대한 매서드를 제공해 주는 방식과,"),"\n",a.createElement(t.p,null,"2️. 하나의 ",a.createElement(t.code,null,"useModal")," 훅이 여러 모달을 관리할 수 있도록 모달 관련 매서드만을 제공하고, 제공한 매서드를 호출할 때 ",a.createElement(t.code,null,"id"),"값을 넣어주는 방식이었다."),"\n",a.createElement("br"),"\n",a.createElement(t.p,null,"먼저, 첫 번째 방식의 구현 코드는 아래와 같다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"import { modalSelector } from '@/recoil/modal';\nimport { useCallback } from 'react';\nimport { useRecoilState, useResetRecoilState } from 'recoil';\n\nfunction useModal(type) {\n  const [state, setState] = useRecoilState(modalSelector(id));\n  const closeModal = useResetRecoilState(modalSelector(id));\n\n  const handleOpenModal = useCallback(\n    (props = null) => {\n      setState({ id, params });\n    },\n    [type, setState]\n  );\n\n  return { state, open: handleOpenModal, close: closeModal };\n}\n\nexport default useModal;\n")),"\n",a.createElement(t.p,null,"컴포넌트에서 사용할 때는 이 방식이 조금 더 코드가 간편하고 직관적이다."),"\n",a.createElement(t.p,null,"다만 만약 하나의 컴포넌트에서 여러 개의 모달을 호출할 경우"),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"... \nconst testModal = useModal('test');\nconst anotherModal = useModal('another');\n\n...\n\ntestModal.open();\nanotherModal.open();\n")),"\n",a.createElement(t.p,null,"위와 같이 모달의 개수만큼 ",a.createElement(t.code,null,"useModal"),"을 호출해줘야 하는 단점이 있다."),"\n",a.createElement("br"),"\n",a.createElement("br"),"\n",a.createElement(t.p,null,"두 번째 방식은 ",a.createElement(t.code,null,"openModal")," 과 ",a.createElement(t.code,null,"closeModal")," 호출 시에 id를 받아서 상태를 설정하기 위해 ",a.createElement(t.code,null,"useRecoilCallback")," 을 사용하여 직접 ",a.createElement(t.code,null,"set")," 과 ",a.createElement(t.code,null,"reset")," 함수를 다룬다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"import { Modal, ModalParams, modalSelector, ModalType } from '@/recoil/modal';\nimport { useCallback } from 'react';\nimport { useRecoilCallback } from 'recoil';\n\nfunction useModal() {\n  const setModal = useRecoilCallback(\n    ({ set }) =>\n      (id: string, value: Modal) => {\n        set(modalSelector(id), value);\n      },\n    []\n  );\n\n  const closeModal = useRecoilCallback(\n    ({ reset }) =>\n      (id: string) => {\n        reset(modalSelector(id));\n      },\n    []\n  );\n\n  const handleOpenModal = useCallback(\n    (id: string, params: ModalParams = null) => {\n            const value = {\n                id,\n                params\n            };\n      setModal(id, value);\n    },\n    [setModal]\n  );\n\n  return { openModal: handleOpenModal, closeModal };\n}\n\nexport default useModal;\n")),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"const {openDialog, closeDialog} = useModal();\n\n... \n\nopenDialog('test');\nopenDialog('another');\n")),"\n",a.createElement(t.p,null,"컴포넌트에서 사용 시에는 위와 같이 매서드를 호출할 때 id만 전달해 주면 된다."),"\n",a.createElement("br"),"\n",a.createElement("br"),"\n",a.createElement(t.h1,{id:"타입-엄격하게-설정하기",style:{position:"relative"}},a.createElement(t.a,{href:"#%ED%83%80%EC%9E%85-%EC%97%84%EA%B2%A9%ED%95%98%EA%B2%8C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0","aria-label":"타입 엄격하게 설정하기 permalink",className:"anchor before"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"타입 엄격하게 설정하기"),"\n",a.createElement(t.h2,{id:"모달-컴포넌트-메모이제이션-강제하기",style:{position:"relative"}},a.createElement(t.a,{href:"#%EB%AA%A8%EB%8B%AC-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98-%EA%B0%95%EC%A0%9C%ED%95%98%EA%B8%B0","aria-label":"모달 컴포넌트 메모이제이션 강제하기 permalink",className:"anchor before"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"모달 컴포넌트 메모이제이션 강제하기"),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"// ModalContainer.ts\n\nconst MODAL_COMPONENTS: Record<string, () => React.ReactElement> = {\n  test: TestModal,\n  test2: Test2Modal\n};\n\nfunction ModalContainer() {\n  const modalList = useRecoilValue(modalListState);\n  const renderModal = modalList.map((id) => {\n    const ModalComponent = MODAL_COMPONENTS[id];\n    return <ModalComponent key={id} />;\n  });\n  return createPortal(\n    <>\n      {renderModal}\n    </>,\n    document.getElementById('modal') as HTMLElement\n  );\n}\n\nexport default ModalContainer;\n")),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"ModalContainer")," 를 다시 살펴보면 ",a.createElement(t.code,null,"modalList"),"에 변경이 일어나는 경우 ModalComponent 전체가 리랜더링 된다. 이는 각 모달 컴포넌트를 ",a.createElement(t.code,null,"React.memo"),"로 메모이제이션 해주면 해결 가능하다."),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"React.memo")," 로 메모이제이션 된 컴포넌트만 ",a.createElement(t.code,null,"MODAL_COMPONENTS")," 에 추가될 수 있도록 ",a.createElement(t.code,null,"MODAL_COMPONENTS"),"타입을 변경해 주었다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"const MODAL_COMPONENTS: Record<string, React.MemoExoticComponent<() => React.ReactElement>> = {\n  test: TestModal,\n  test2: Test2Modal\n};\n")),"\n",a.createElement(t.p,null,"(현재 프로젝트에서는 각 모달 컴포넌트들이 복잡한 로직을 가지고 있기 때문에 위처럼 메모이제이션을 강제했지만, 그렇지 않은 경우에는 메모이제이션 여부를 자유롭게 설정할 수 있도록 하는 것이 더 바람직할 수 있다.)"),"\n",a.createElement("br"),"\n",a.createElement("br"),"\n",a.createElement(t.h2,{id:"정의한-모달-id만-사용하도록-타입-정의하기",style:{position:"relative"}},a.createElement(t.a,{href:"#%EC%A0%95%EC%9D%98%ED%95%9C-%EB%AA%A8%EB%8B%AC-id%EB%A7%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8F%84%EB%A1%9D-%ED%83%80%EC%9E%85-%EC%A0%95%EC%9D%98%ED%95%98%EA%B8%B0","aria-label":"정의한 모달 id만 사용하도록 타입 정의하기 permalink",className:"anchor before"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"정의한 모달 ID만 사용하도록 타입 정의하기"),"\n",a.createElement(t.p,null,"지금까지는 모달의 id 타입을 그냥 ",a.createElement(t.code,null,"'string'")," 으로 정의했지만,"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"MODAL_COMPONENTS")," 에 정의하지 않은 다이얼로그를 호출할 시에는 타입에러가 발생하도록 더 엄격한 타입정의가 필요했다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"type ModalKeys = keyof typeof MODAL_COMPONENTS;\n")),"\n",a.createElement(t.p,null,"위처럼 정의하면 해결될 것 같지만, 실제로는 ",a.createElement(t.code,null,"'string'")," 타입이 되어버린다."),"\n",a.createElement(t.p,null,"이 문제는 typescript 4.9 버전부터 제공하는 ",a.createElement(t.code,null,"satisfies")," 연산자를 사용하여 해결했다."),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"const MODAL_COMPONENTS = {\n  test: TestModal,\n  test2: Test2Modal\n} satisfies Record<string, React.MemoExoticComponent<() => React.ReactElement>>;\n")),"\n",a.createElement("img",{src:"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FHL40U%2Fbtsdwvl2J3q%2FhjTUp9aMys1IrJrvsG6qU1%2Fimg.png",width:"524",className:"m-auto"}),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"satisfies"),"를 사용하면 ",a.createElement(t.code,null,"MODAL_COMPONENTS"),"에 직접적인 속성 추가에 대해서는 자유로우면서도,\n",a.createElement(t.code,null,"MODAL_COMPONENTS"),"에 정의된 속성만 사용할 수 있도록 최대한 구체적인 타입을 정의의 해 준다."),"\n",a.createElement(t.p,null,"이제 ",a.createElement(t.code,null,"openDialog('teest')")," 를 호출하면 타입 에러를 뱉어내게 된다."),"\n",a.createElement("br"),"\n",a.createElement("br"),"\n",a.createElement(t.h1,{id:"최종-코드",style:{position:"relative"}},a.createElement(t.a,{href:"#%EC%B5%9C%EC%A2%85-%EC%BD%94%EB%93%9C","aria-label":"최종 코드 permalink",className:"anchor before"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"✨최종 코드"),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"// ModalContainer.ts\n\nconst MODAL_COMPONENTS: Record<string, () => React.ReactElement> = {\n  test: TestModal,\n  test2: Test2Modal\n};\n\nfunction ModalContainer() {\n  const modalList = useRecoilValue(modalListState);\n  const renderModal = modalList.map((id) => {\n    const ModalComponent = MODAL_COMPONENTS[id];\n    return <ModalComponent key={id} />;\n  });\n  return createPortal(\n    <>\n      {renderModal}\n    </>,\n    document.getElementById('modal') as HTMLElement\n  );\n}\n\nexport default ModalContainer;\n")),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"// recoil/modal.ts\n\nimport { atom, atomFamily, DefaultValue, selectorFamily } from 'recoil';\n\nexport type ModalType = \nexport type ModalParams = Record<string, unknown> | null;\nexport type Modal = {\n  id: ModalType;\n  isOpen: boolean;\n  params: ModalParams;\n};\n\nexport const modalListState = atom<ModalType[]>({\n  key: 'modalListState',\n  default: []\n});\n\nconst modalState = atomFamily<Modal, ModalType>({\n  key: 'modalState',\n  default: (id) => ({\n    id,\n    params: null\n  })\n\nexport const modalSelector = selectorFamily<Modal, ModalType>({\n  key: 'modalSelector',\n  get:\n    (id) => get(modalState(id)),\n  set:\n    (id) =>\n    ({ get, set, reset }, newValue) => {\n      if (newValue instanceof DefaultValue) {\n        set(modalListState, (prev) => prev.filter((modalId) => modalId !== id));\n        reset(modalState(id));\n        return;\n      }\n\n      set(modalState(id), newValue);\n\n      if (get(modalListState).find((id) => id === newValue.id)) return;\n      set(modalListState, (prev) => [...prev, newValue.id]);\n    }\n});\n")),"\n",a.createElement(t.pre,null,a.createElement(t.code,null,"// useModal.ts\n\nimport { Modal, ModalParams, modalSelector, ModalType } from '@/recoil/modal';\nimport { useCallback } from 'react';\nimport { useRecoilCallback } from 'recoil';\n\nfunction useModal() {\n  const setModal = useRecoilCallback(\n    ({ set }) =>\n      (id: ModalType, value: Modal) => {\n        set(modalSelector(id), value);\n      },\n    []\n  );\n\n  const closeModal = useRecoilCallback(\n    ({ reset }) =>\n      (id: ModalType) => {\n        reset(modalSelector(id));\n      },\n    []\n  );\n\n  const handleOpenModal = useCallback(\n    (id: ModalType, params: ModalParams = null) => {\n            const value = {\n                id,\n                params\n            };\n      setModal(id, value);\n    },\n    [setModal]\n  );\n\n  return { openModal: handleOpenModal, closeModal };\n}\n\nexport default useModal;\n")),"\n",a.createElement("br"),"\n",a.createElement("br"),"\n",a.createElement(t.h1,{id:"참고-",style:{position:"relative"}},a.createElement(t.a,{href:"#%EC%B0%B8%EA%B3%A0-","aria-label":"참고  permalink",className:"anchor before"},a.createElement(t.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"참고 📌"),"\n",a.createElement(t.p,null,"아이디어를 얻은 곳\n",a.createElement(t.a,{href:"https://betterprogramming.pub/implementing-list-items-with-react-and-recoil-c58f75e307dc"},"Implementing List Items With React and Recoil")),"\n",a.createElement("br"),"\n",a.createElement(t.p,null,a.createElement(t.code,null,"satisfies"),"에 대해 참고한 곳"),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-9.html"},"Documentation - TypeScript 4.9")),"\n",a.createElement(t.p,null,a.createElement(t.a,{href:"https://medium.com/@cefn/typescript-satisfies-6ba52e74cb2f"},"Typescript’s new ‘satisfies’ operator")))}var r=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},(0,l.ah)(),e.components);return t?a.createElement(t,e,a.createElement(o,e)):o(e)},c=n(1883),m=n(157),d=n(588),s=n(8709),i=n(9357),u=n(7174),E=n(4462),p=n(8336),M=n(1075);const h={img:e=>{let{src:t,alt:n}=e;return a.createElement("img",{src:t,alt:n,className:"m-auto md:w-3/4"})},pre:E.d,code:e=>a.createElement("code",Object.assign({},e,{className:"bg-background-primary text-accent-default bg-opacity-70"}))},f=e=>{var t;let{data:{previous:n,next:o,site:r,mdx:i},location:E,children:f}=e;const S=(null===(t=r.siteMetadata)||void 0===t?void 0:t.title)||"Title";return a.createElement(s.Z,{location:E,title:S},a.createElement("article",{className:"blog-post px-8 pt-10",itemScope:!0,itemType:"http://schema.org/Article"},a.createElement("header",{className:"text-center py-14"},a.createElement("h1",{itemProp:"headline"},i.frontmatter.title),a.createElement("p",{className:"text-accent-default text-xs mt-8"},i.frontmatter.date)),a.createElement("section",{className:"h-fit my-28 text-text-default",itemProp:"articleBody"},a.createElement(l.Zo,{components:h},f)),a.createElement(u.a,null,i.frontmatter.tags.map((e=>a.createElement(u.V,{key:e,text:e})))),a.createElement("hr",{className:"my-10"}),a.createElement(p.Z),a.createElement("footer")),a.createElement("nav",{className:"blog-post-nav px-8 mt-8"},a.createElement("ul",{className:"flex flex-wrap justify-between list-none p-0 text-text-default"},n?a.createElement(c.Link,{to:n.fields.slug,rel:"prev"},a.createElement("li",{className:"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3"},a.createElement(d.D,{size:22,className:"text-accent-default"}),a.createElement("p",{className:"max-w-[28rem]"},n.frontmatter.title))):a.createElement("div"),o&&a.createElement(c.Link,{to:o.fields.slug,rel:"next"},a.createElement("li",{className:"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3"},a.createElement("p",{className:"max-w-[28rem]"},o.frontmatter.title),a.createElement(m.M,{size:22,className:"text-accent-default"}))))),a.createElement(M.Z,{contents:i.tableOfContents}))},S=e=>{let{data:{mdx:t}}=e;return a.createElement(i.Z,{title:t.frontmatter.title,description:t.frontmatter.description||t.excerpt})};function g(e){return a.createElement(f,e,a.createElement(r,e))}}}]);
//# sourceMappingURL=component---src-templates-blog-post-js-content-file-path-content-blog-react-modal-management-with-recoil-mdx-d930e64d4eb7992d3030.js.map