{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-content-blog-react-recoil-for-asynchronous-data-fetching-mdx-d4dcfeff5b0b3510eae2.js","mappings":"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","sources":["webpack://leego.dev.log/./content/blog/REACT/recoil-for-asynchronous-data-fetching.mdx","webpack://leego.dev.log/./src/templates/blog-post.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    blockquote: \"blockquote\",\n    p: \"p\",\n    a: \"a\",\n    h1: \"h1\",\n    span: \"span\",\n    code: \"code\",\n    strong: \"strong\",\n    pre: \"pre\",\n    em: \"em\",\n    ol: \"ol\",\n    li: \"li\",\n    h2: \"h2\",\n    br: \"br\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"💡 이 글은 \", React.createElement(_components.a, {\n    href: \"https://iam2go.github.io/REACT/lets-explore-recoil/\"\n  }, \"'React스러운 상태관리 라이브러리, Recoil을 알아보자'\"), \" 에서 이어집니다.\"), \"\\n\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"selector\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#selector\",\n    \"aria-label\": \"selector permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), React.createElement(_components.code, null, \"selector\")), \"\\n\", React.createElement(_components.p, null, \"recoil에서는 \", React.createElement(_components.code, null, \"selector\"), \" 를 사용하여 비동기 데이터를 처리한다.\"), \"\\n\", React.createElement(\"img\", {\n    src: \"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fbt63Y9%2FbtrHPgmaA8L%2FgXSnvLlSzkAkM7uFErIW71%2Fimg.png\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"redux\"), \"에서 비동기 처리를 할 때는 \", React.createElement(_components.strong, null, \"redux-thunk\"), \"나 \", React.createElement(_components.strong, null, \"redux-saga\"), \"와 같은 미들웨어를 통해 action을 중간에 인터셉트하여 추가 동작을 수행하였다.\"), \"\\n\", React.createElement(\"img\", {\n    src: \"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FcIVRG2%2FbtrHPfHAPmu%2FKFkBsqfb6pF7pJrKbK9Yc1%2Fimg.png\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(_components.p, null, \"하지만 recoil에서 비동기 처리는 React의 일반 state의 흐름을 벗어나지 않고 거의 동일하게 흘러간다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"여기 간단한 앱을 만들었다.\"), \"\\n\", React.createElement(_components.p, null, \"이 앱은 페이지가 마운트되면 사용자 리스트를 받아와서 화면에 보여주며, 리스트를 클릭하면 해당 사용자의 간단한 프로필을 보여준다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// App.tsx\\n\\nimport React from \\\"react\\\";\\nimport { RecoilRoot } from \\\"recoil\\\";\\nimport UserInfo from \\\"./components/UserInfo\\\";\\nimport UserList from \\\"./components/UserList\\\";\\n\\nfunction App() {\\n  return (\\n    <RecoilRoot>\\n      <AppWrap>\\n        <UserList />\\n        <UserInfo />\\n      </AppWrap>\\n    </RecoilRoot>\\n  );\\n}\\n\\nexport default App;\\n\")), \"\\n\", React.createElement(_components.p, null, \"사용자 리스트를 받아오는 부분은 \", React.createElement(_components.code, null, \"UserList\"), \" 에서 담당한다.\"), \"\\n\", React.createElement(_components.p, null, \"안타깝게도 API는 지금 존재하지 않으니, 임시로 Promise 객체를 생성해 리턴해주었다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"getUserList()\"), \" 는 사용자 리스트 API를 호출하는 매서드이다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// apis/user.ts\\n\\nexport type UserType = {\\n  id: string;\\n  name: string;\\n};\\n\\nexport const getUserList = (): Promise<UserType[]> => {\\n  return new Promise((resolve) => {\\n    setTimeout(() => resolve(userList), 500);\\n  });\\n};\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// recoil/store.ts\\n\\nimport { atom, selector } from \\\"recoil\\\";\\nimport { getUserList, UserType } from \\\"../apis/user\\\";\\n\\nexport const userListSelector = selector<UserType[]>({\\n  key: \\\"userListSelector\\\",\\n  get: async () => {\\n    return await getUserList();\\n  },\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"selector의 get매서드에서 API를 호출하고\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// components/UserList.tsx\\n\\nimport React from \\\"react\\\";\\nimport { useRecoilValue } from \\\"recoil\\\";\\nimport { userListSelector } from \\\"../recoil/store\\\";\\nimport UserItem from \\\"./UserItem\\\";\\n\\nfunction UserList() {\\n  const userList = useRecoilValue(userListSelector);\\n  return (\\n    <Wrap>\\n      {userList?.map((user) => (\\n        <UserItem key={user.id} user={user} />\\n      ))}\\n    </Wrap>\\n  );\\n}\\n\\n...\\nexport default UserList;\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"useRecoilValue\"), \" 를 사용하여 응답 데이터를 가져왔다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"실행을 해보면, 다음과 같은 에러를 만나게 된다.\"), \"\\n\", React.createElement(\"img\", {\n    src: \"https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbFgi5w%2FbtrHOlhqgBF%2FKF6E3UV8fgcBMV9fm5Rfy1%2Fimg.png\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(_components.p, null, \"컴포넌트가 마운트 되기 전에 상태를 불러왔기 때문에 발생한 에러이다. 보통의 경우 우리는 마운트가 완료된 이후 데이터를 호출하기 위하여 \", React.createElement(_components.code, null, \"useEffect(() => {} ,[])\"), \" 안에 호출 매서드를 넣어주었다.\"), \"\\n\", React.createElement(_components.p, null, \"하지만 \", React.createElement(_components.code, null, \"useRecoilValue\"), \" 는 react Hook이기 때문에 useEffect의 안에서 사용할 수 없다.\"), \"\\n\", React.createElement(_components.p, null, \"공식 홈페이지에서 recoil은 보류 중인 데이터를 다루기 위해 \", React.createElement(_components.a, {\n    href: \"https://reactjs.org/docs/concurrent-mode-suspense.html\"\n  }, \"React Suspense\"), \"와 함께 동작하도록 디자인되어 있다 고 말한다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"suspense\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#suspense\",\n    \"aria-label\": \"suspense permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Suspense\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"React.Suspense\"), \" 는 \", React.createElement(_components.em, null, \"컴포넌트가 읽어 들이고 있는 데이터가 아직 준비되지 않았다\"), \" 고 React에 알려주는 일종의 메커니즘이다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"데이터 불러오기 시작 → 렌더링 시작 → 데이터 불러오기 완료\"), \" 순서로 동작하는 데이터 호출 로직에서 데이터 호출 완료 여부를 인지하여 데이터 불러오기를 완료할 때까지 \", React.createElement(_components.code, null, \"fallback\"), \" 속성 값으로 넣어준 컴포넌트를 표시한다.\"), \"\\n\", React.createElement(_components.p, null, \"어떤 식으로 동작하는지만 이해하면 되기 때문에 \", React.createElement(_components.code, null, \"fallback\"), \" 으로 간단하게 Loading 텍스트만 띄워보았다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// App.tsx\\n\\nfunction App() {\\n  return (\\n    <RecoilRoot>\\n      <AppWrap>\\n        <React.Suspense fallback={<div>Loading...</div>}>\\n          <UserList />\\n          <UserInfo />\\n        </React.Suspense>\\n      </AppWrap>\\n    </RecoilRoot>\\n  );\\n}\\n\")), \"\\n\", React.createElement(\"img\", {\n    src: \"https://blog.kakaocdn.net/dn/cihn9k/btrHOTxZUgr/6wmdfZ0AmOnKZ1VBjaA6rK/img.gif\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(_components.p, null, \"데이터를 받아올 때까지 Loading 텍스트가 나타나며, 더 이상 에러가 뜨지 않는다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"매개변수가-있는-비동기-데이터-다루기\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EA%B0%80-%EC%9E%88%EB%8A%94-%EB%B9%84%EB%8F%99%EA%B8%B0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%8B%A4%EB%A3%A8%EA%B8%B0\",\n    \"aria-label\": \"매개변수가 있는 비동기 데이터 다루기 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"매개변수가 있는 비동기 데이터 다루기\"), \"\\n\", React.createElement(_components.p, null, \"recoil에서 매개변수를 포함한 비동기 호출을 하기 위해 주로 두 가지 방법을 사용한다.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Recoil Atom + Recoil selector\"), \"\\n\", React.createElement(_components.li, null, \"React state + Recoil selectorFamily\"), \"\\n\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"먼저 Recoil Atom + Recoil selector 를 사용한 방법부터 살펴보자.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"1️-recoil-atom--recoil-selector\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#1%EF%B8%8F-recoil-atom--recoil-selector\",\n    \"aria-label\": \"1️ recoil atom  recoil selector permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"1️⃣ Recoil Atom + Recoil selector\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// recoil/store.ts\\n\\nexport const selectedUserState = atom({\\n  key: \\\"selectedUserState\\\",\\n  default: \\\"\\\",\\n});\\n\\nexport const userInfoState = selector<UserInfoType | null>({\\n  key: \\\"userInfoState\\\",\\n  get: async ({ get }) => {\\n    const id = get(selectedUserState);\\n    if (id === \\\"\\\") return null;\\n    return await getUserInfo({ id });\\n  },\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"userInfoState\"), \" 는 \", React.createElement(_components.code, null, \"selectedUserState\"), \" 에 의존성을 가지기 때문에 \", React.createElement(_components.code, null, \"selectedUserState\"), \" 값이 변경되면 \", React.createElement(_components.code, null, \"userInfoState\"), \"의 get매서드가 실행된다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"selectedUserState\"), \" 에는 클릭한 사용자의 id가 담긴다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// components/UserList.tsx\\n\\nfunction UserList() {\\n  const userList = useRecoilValue(userListSelector);\\n  const setSelectedUser = useSetRecoilState(selectedUserState);\\n  const onClick = (id: string) => {\\n    setSelectedUser(id);\\n  };\\n  return (\\n    <Wrap>\\n      {userList?.map((user) => (\\n        <UserItem key={user.id} user={user} onClick={onClick} />\\n      ))}\\n    </Wrap>\\n  );\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// components/UserInfo.tsx\\n\\nimport React from \\\"react\\\";\\nimport { useRecoilValue } from \\\"recoil\\\";\\nimport { userInfoState } from \\\"../recoil/store\\\";\\n\\nfunction UserInfo() {\\n  const infoData = useRecoilValue(userInfoState);\\n  if (!infoData) return <></>;\\n  return (\\n    <InfoBox>\\n      <h1>{infoData.name}</h1>\\n      <Tag>{\\\"@\\\" + infoData.id}</Tag>\\n      <Contents>{infoData.text}</Contents>\\n    </InfoBox>\\n  );\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"useRecoilValue\"), \" 를 통해 값을 가져온다.\"), \"\\n\", React.createElement(\"img\", {\n    src: \"https://blog.kakaocdn.net/dn/bHPcXt/btrHL1YzBsr/OiaQQuBki3v7WRkUB1Jku0/img.gif\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"가짜 api에는 딜레이 시간을 1초로 걸어놓았다. 잘 보면 처음 클릭했을 때와는 다르게 두 번째 클릭 시에는 딜레이 없이 캐싱된 데이터가 즉각적으로 보여지게된다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"2️-react-state--recoil-selectorfamily\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#2%EF%B8%8F-react-state--recoil-selectorfamily\",\n    \"aria-label\": \"2️ react state  recoil selectorfamily permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"2️⃣ React state + Recoil selectorFamily\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"selectorFamily\"), \"는 selector와 유사하지만 parameter(매개변수)를 받으며,\\n이 parameter의 값에 따라 메모이징된 동일한 selector 인스턴스를 반환한다.\"), \"\\n\", React.createElement(_components.p, null, \"구조는 아래와 같다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"function selectorFamily<T, Parameter>({\\n  key: string,\\n\\n  get: Parameter => ({get: GetRecoilValue}) => Promise<T> | RecoilValue<T> | T,\\n\\n  set: Parameter => (\\n    {\\n      get: GetRecoilValue,\\n      set: SetRecoilValue,\\n      reset: ResetRecoilValue,\\n    },\\n    newValue: T | DefaultValue,\\n  ) => void,\\n\\n  dangerouslyAllowMutability?: boolean,\\n}): Parameter => RecoilState<T>\\n\")), \"\\n\", React.createElement(_components.p, null, \"❗️주의할 점은 parameter비교 시 참조 동등성 대신 \", React.createElement(_components.strong, null, \"값 동등성\"), \"을 사용한다는 점이다.\"), \"\\n\", React.createElement(_components.p, null, \"javascript에서 객체의 비교는 주소의 비교이기 때문에 \", React.createElement(_components.code, null, \"{a: 1} !== {a: 1}\"), \" 와 같이, 값이 동일해도 다른 객체로 취급한다. 하지만 Recoil에서 parameter동일성은 레퍼런스가 아닌 값을 확인하기 때문에 아래의 코드에서 \", React.createElement(_components.code, null, \"data1\"), \"과 \", React.createElement(_components.code, null, \"data2\"), \"는 동일한 상태를 참조한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const data1 = useRecoilValue(myDataQuery({userID: 132}));\\nconst data2 = useRecoilValue(myDataQuery({userID: 132}));\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"이제 코드를 작성해보자.\"), \"\\n\", React.createElement(_components.p, null, \"parameter로 \", React.createElement(_components.code, null, \"id\"), \" 를 받아서 API 호출 시 그 값을 그대로 넘겨주도록 설정해주었다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// recoil/store.ts\\n\\nexport const userInfoState = selectorFamily<UserInfoType | null, string>({\\n  key: \\\"userInfoState\\\",\\n  get: (id) => async () => {\\n    if (id === \\\"\\\") return null;\\n    return await getUserInfo({ id });\\n  },\\n});\\n\")), \"\\n\", React.createElement(_components.p, null, \"호출 시에는 아래와 같이 인수를 넣어준다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"  const infoData = useRecoilValue(userInfoState(userID));\\n\")), \"\\n\", React.createElement(_components.p, null, \"선택한 사용자 id에 따라 사용자 정보 API를 호출해야 하기 때문에 선택한 사용자를 로컬 state로 선언해줘야 한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// App.tsx\\n\\nfunction App() {\\n  const [selectedUser, setSelectedUser] = useState(\\\"\\\");\\n  return (\\n    <RecoilRoot>\\n      <AppWrap>\\n        <React.Suspense fallback={<div>Loading...</div>}>\\n          <UserList onClick={setSelectedUser} />\\n          <UserInfo userID={selectedUser} />\\n        </React.Suspense>\\n      </AppWrap>\\n    </RecoilRoot>\\n  );\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// components/UserList.tsx\\n\\ntype Props = {\\n  onClick: (id: string) => void;\\n};\\nfunction UserList({ onClick }: Props) {\\n  const userList = useRecoilValue(userListSelector);\\n\\n  return (\\n    <Wrap>\\n      {userList?.map((user) => (\\n        <UserItem key={user.id} user={user} onClick={onClick} />\\n      ))}\\n    </Wrap>\\n  );\\n}\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// components/UserInfo.tsx\\n\\ntype Props = {\\n  userID: string;\\n};\\n\\nfunction UserInfo({ userID }: Props) {\\n  const infoData = useRecoilValue(userInfoState(userID));\\n  if (!infoData) return <></>;\\n  return (\\n    <InfoBox>\\n      <h1>{infoData.name}</h1>\\n      <Tag>{\\\"@\\\" + infoData.id}</Tag>\\n      <Contents>{infoData.text}</Contents>\\n    </InfoBox>\\n  );\\n}\\n\")), \"\\n\", React.createElement(\"img\", {\n    src: \"https://blog.kakaocdn.net/dn/bZ4TOx/btrHOluXqWm/FCJZj29QyiL7zsirbZ81a0/img.gif\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"selector\"), \"와 \", React.createElement(_components.code, null, \"selectorFamily\"), \" 모두 입력값이 동일한 경우에 대하여 캐싱한 값을 반환한다.\", React.createElement(_components.br), \"\\n\", \"어떤 방법이 더 좋다! 하는 건 없으니 상황에 맞춰서 더 편한 방법을 사용하면 된다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"에러-처리하기\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%97%90%EB%9F%AC-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0\",\n    \"aria-label\": \"에러 처리하기 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"에러 처리하기\"), \"\\n\", React.createElement(_components.p, null, \"비동기 요청은 일반적으로 로딩, 성공, 실패 이렇게 세 가지 상태를 가진다. \", React.createElement(_components.code, null, \"<UserList/>\"), \"와 \", React.createElement(_components.code, null, \"<UserInfo/>\"), \" 컴포넌트는 성공의 상태만을 다룬다. 그리고 위에서 우리는 \", React.createElement(_components.code, null, \"<Suspense>\"), \" 를 통해 로딩 상태를 나타냈다.\"), \"\\n\", React.createElement(_components.p, null, \"이제 비동기 요청이 실패했을 때, 즉 에러 처리를 다뤄보자.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"React에서는 컴포넌트에서 에러가 발생하면 모든 컴포넌트를 언마운트 시킨다. 조그마한 에러가 발생하더라도 애플리케이션 전체가 중단되는 것이다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"Error Boundary\"), \"는 \", React.createElement(_components.strong, null, \"하위 컴포넌트 트리의 어디에서든 에러를 리포트하며 애플리케이션 중단 대신 fallback UI를 보여주는\"), \" React 컴포넌트다.\"), \"\\n\", React.createElement(_components.p, null, \"정확히는 렌더링 중 발생하는 에러, React와 관련된 에러를 캐치한다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"이 글을 쓰는 현시점을 기준으로, ErrorBoundary는 클래스형 컴포넌트로 이루어져 있으며, 커스텀을 위해서는 직접 이 클래스형 컴포넌트를 가져와 수정해야 한다.\"), \"\\n\", React.createElement(_components.p, null, \"다행히 ErrorBoundary를 보다 간단하게 사용할 수 있도록 만든 확장 라이브러리 가 있다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://www.npmjs.com/package/react-error-boundary\",\n    title: \"react-error-boundary npm주소\"\n  }, \"react-error-boundary\"), \"를 사용하여 에러를 처리해보자.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"npm i react-error-boundary\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// App.tsx\\n\\n...\\nimport { ErrorBoundary } from \\\"react-error-boundary\\\";\\n\\nfunction App() {\\n  return (\\n    <RecoilRoot>\\n      <AppWrap>\\n        <ErrorBoundary fallback={<div>Error!</div>}>\\n          <Suspense fallback={<div>Loading...</div>}>\\n            <UserList />\\n            <UserInfo/>\\n          </Suspense>\\n        </ErrorBoundary>\\n      </AppWrap>\\n    </RecoilRoot>\\n  );\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"ErrorBoundary는 하위에 존재하는 컴포넌트의 에러만을 포착하기 때문에, 에러를 포착할 컴포넌트들을 감싸는 형식으로 사용한다.\"), \"\\n\", React.createElement(_components.p, null, \"❗️여기에서는 로더를 간단하게 div요소로 만들었기 때문에 \", React.createElement(_components.code, null, \"fallback\"), \" 속성에 넣어주었지만, 실제로는 \", React.createElement(_components.strong, null, React.createElement(_components.code, null, \"FallbackComponent\"), React.createElement(_components.strong, null, \"또는\"), React.createElement(_components.code, null, \"fallbackRender\")), \" 속성을 사용할 것을 권장한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// apis/user.ts\\n\\nexport const getUserInfo = ({ id }: { id: string }): Promise<UserInfoType> => {\\n  return new Promise((resolve, reject) => {\\n    setTimeout(() => {\\n      const [data] = _data.filter((user) => user.id === id);\\n      if (data) {\\n        resolve(data);\\n      } else {\\n        reject();\\n      }\\n    }, 300);\\n  });\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"사용자 리스트에 정보가 없는 사용자를 추가한 뒤 에러 처리가 잘 동작하는지 확인해보았다.\"), \"\\n\", React.createElement(\"img\", {\n    src: \"https://blog.kakaocdn.net/dn/bRzhCZ/btrHPJ2KqsD/uKPpxfDxIOrP3kvlr7ol6k/img.gif\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"여기까지는 \", React.createElement(_components.code, null, \"UserInfo\"), \" 컴포넌트에서 에러가 발생했음에도 \", React.createElement(_components.code, null, \"UserList\"), \" 까지 렌더링을 중단하였다. 로딩 시에도 마찬가지이다. \", React.createElement(_components.code, null, \"UserInfo\"), \" 컴포넌트에서만 데이터를 가져오는 중이었지만 마치 페이지 전체가 로딩 중인 것처럼 부자연스럽게 로더가 보였다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"UserInfo\"), \" 컴포넌트가 로딩 중일 때는 \", React.createElement(_components.code, null, \"UserInfo\"), \" 컴포넌트 부분만 로더를 띄우고 싶다면 어떻게 해야 할까?\\n\", React.createElement(_components.code, null, \"UserInfo\"), \" 에게 독립적인 \", React.createElement(_components.code, null, \"<Suspense>\"), \" 경계를 부여하면 된다.\"), \"\\n\", React.createElement(_components.p, null, \"각각의 컴포넌트에 고유의 상태를 나타내 주고 싶다면? 각각의 컴포넌트에 경계를 부여해주면 된다.\"), \"\\n\", React.createElement(_components.p, null, \"(여기서부터는 원활한 설명을 위해 ErrorBoundary와 Suspense를 총칭하여 \", React.createElement(_components.strong, null, \"'경계\"), \"'라 표현하겠다.)\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"예시로 확인해보자.\"), \"\\n\", React.createElement(_components.p, null, \"먼저 설정해주었던 경계의 하위에 \", React.createElement(_components.code, null, \"UserInfo\"), \"만을 감싸는 새로운 경계를 추가해주었다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// App.tsx\\n\\nfunction App() {\\n  return (\\n    <AppWrap>\\n      <ErrorBoundary fallback={<div>Error!</div>}>\\n        <Suspense fallback={<div>Loading...</div>}>\\n          <UserList/>\\n          <ErrorBoundary fallback={<div>Error!</div>}>\\n            <Suspense fallback={<div>Loading...</div>}>\\n              <UserInfo/>\\n            </Suspense>\\n          </ErrorBoundary>\\n        </Suspense>\\n      </ErrorBoundary>\\n    </AppWrap>\\n  );\\n}\\n\")), \"\\n\", React.createElement(\"img\", {\n    src: \"https://blog.kakaocdn.net/dn/PkZ3j/btrHOTLyynz/seWFCDi6UcTcWtRZm2sWgk/img.gif\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(_components.p, null, \"훨씬 나아진 모습을 볼 수 있다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"React는 컴포넌트가 렌더링 상태일 때 해당 컴포넌트 상위에서 트리상으로 가장 가까운 Suspense 찾아 fallback을 표시한다.\"), \"\\n\", React.createElement(_components.p, null, \"위의 특성을 유념하여 원하는 곳 어디에든 경계를 설정하면 된다.\"), \"\\n\", React.createElement(\"img\", {\n    src: \"https://blog.kakaocdn.net/dn/ytgOY/btrHOTER3sc/5eHT3uV7TER68DL5KAK8P0/img.gif\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(_components.p, null, \"현재는 에러가 발생하면 다른 사용자를 클릭해도 다시 렌더링 되지 않는다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"// App.tsx\\n\\n...\\n    <ErrorBoundary\\n        fallback={<div>Error!</div>}\\n        resetKeys={[selectedUser]}\\n    >\\n        <Suspense fallback={<div>Loading...</div>}>\\n            <UserInfo userID={selectedUser} />\\n        </Suspense>\\n    </ErrorBoundary>\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"resetKeys\"), \" 값으로 의존성 배열을 넘겨줘서 특정 값이 변경되었을 때 초기화되도록 설정할 수 있다.\"), \"\\n\", React.createElement(\"img\", {\n    src: \"https://blog.kakaocdn.net/dn/cMoBCv/btrHNW3fCM4/OyivJkpw6wCWx9292FKCSK/img.gif\",\n    width: \"612\",\n    className: \"m-auto\"\n  }), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"reocil과-선언적-프로그래밍\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#reocil%EA%B3%BC-%EC%84%A0%EC%96%B8%EC%A0%81-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\",\n    \"aria-label\": \"reocil과 선언적 프로그래밍 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"Reocil과 선언적 프로그래밍\"), \"\\n\", React.createElement(_components.p, null, \"recoil을 통해 비동기 데이터를 처리하는 방식은 우리가 이전까지 사용해왔던 방식과 차이가 있었다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const { createSlice } = require('@reduxjs/toolkit');\\n\\nexport const somethingSelector = (state) => state.something;\\n\\nconst initialState = {\\n  loading: false,\\n  data: null,\\n  error: null\\n};\\n\\nconst something = createSlice({\\n  name: 'something',\\n  initialState,\\n  reducers: {\\n    getSomethingRequest: (state, action) => {\\n      state.loading = true;\\n    },\\n    getRequestSuccess: (state, action) => {\\n      const { data } = action.payload;\\n      state.loading = false;\\n            state.data = data;\\n    },\\n    getRequestFailure: (state, action) => {\\n      const { error } = action.payload;\\n      state.loading = false;\\n      state.error = error;\\n    }\\n  }\\n});\\n...\\n\\n\")), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"function App() {\\n    const {loading, data, error} = useSelector(somethingSelector);\\n\\n\\nif (loading) {\\n    return <Spinner/>\\n}\\n\\nif (error) {\\n    return <ErrorMessage error={error}/>\\n}\\n\\nreturn <DataView data={data}/>;\\n}\\n\\nexport default ImperativeComponent;\\n\")), \"\\n\", React.createElement(_components.p, null, \"위 코드가 아마 우리가 늘 사용했던 방식 일 것이다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"App\"), \" 컴포넌트에서 selector를 통해 redux에서 비동기 데이터 처리 상태를 가져오고, 상태에 따라서 각각 다른 UI를 보여주었다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"App\"), \" 컴포넌트는 다음과 같이 명령한다.\"), \"\\n\", React.createElement(_components.p, null, \"💁‍♀️:  \", React.createElement(_components.code, null, \"loading\"), \" 이 \", React.createElement(_components.code, null, \"true\"), \" 일 때는 \", React.createElement(_components.code, null, \"<Spinner/>\"), \" 를 보여주고,\\n\", React.createElement(_components.code, null, \"error\"), \" 가 발생했다면 \", React.createElement(_components.code, null, \"<ErrorMessage/>\"), \" 를 보여주고,\\n그게 아니라면 \", React.createElement(_components.code, null, \"<DataView/>\"), \" 를 보여줘!\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"이러한 방식을 \", React.createElement(_components.strong, null, \"명령형 프로그래밍\"), \"이라고 한다.\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, React.createElement(_components.strong, null, \"‘UI를 어떻게(HOW) 보여줄 것인가’\")), \" 에 집중하고 있기 때문이다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"recoil을 사용한 비동기 데이터 처리에서 우리는 \", React.createElement(_components.code, null, \"<Suspense/>\"), \" 와 \", React.createElement(_components.code, null, \"<ErrorBoundary/>\"), \" 를 사용했다. 위의 App컴포넌트를 recoil을 사용한 방식으로 바꾸면 아래 코드처럼 나타낼 수 있다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"function App() {\\n  const data = useRecoilValue(somethingSelector)\\n  return (\\n      <ErrorBoundary FallbackComponent={ErrorMessage}>\\n        <Suspense fallback={Spinner}>\\n                    <DataView data={data}/>\\n        </Suspense>\\n      </ErrorBoundary>\\n  );\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"이렇게 \", React.createElement(_components.code, null, \"<Suspense/>\"), \" 와 \", React.createElement(_components.code, null, \"<ErrorBoundary/>\"), \" 를 사용하여 컴포넌트를 구성하는 방식이 \", React.createElement(_components.strong, null, \"선언적 프로그래밍\"), \"이다.\"), \"\\n\", React.createElement(_components.p, null, \"명령형 프로그래밍과는 다르게 \", React.createElement(_components.em, null, React.createElement(_components.strong, null, \"‘무엇을(WHAT) 보여줄 것인가'\")), \" 에 집중한다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"데이터를 아직 불러오고 있는 상황일 때는 \", React.createElement(_components.code, null, \"<Spinner/>\"), \" 를,\\n에러가 발생한 상황일 때는 \", React.createElement(_components.code, null, \"<ErrorMessage/>\"), \" 를,\\n데이터를 정상적으로 받은 상황이라면 \", React.createElement(_components.code, null, \"<DataView/>\"), \" 를 보여준다.\"), \"\\n\", React.createElement(_components.p, null, \"‘상황’에 따라 적절한 UI를 나타내고 있다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"✔️ 아직 그 차이를 모르겠다면 실생활 예시를 살펴보자.\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, React.createElement(_components.em, null, \"퇴근 후 친구와 저녁 약속이 있는 당신은 한 레스토랑에 도착했다. 그리고, 프론트의 직원에게 다음과 같이 말한다.\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.strong, null, \"명령적 방식(HOW) :\"), \" \", React.createElement(_components.em, null, \"“ 저 구석에 창가 자리가 비어있는 것 같은데, 저희 일행은 저 자리로 걸어가서 앉을게요.”\"), React.createElement(_components.br), \"\\n\", React.createElement(_components.strong, null, \"선언적 방식(WHAT):\"), \" \", React.createElement(_components.em, null, \"“ 두 명 자리 부탁해요.”\")), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"명령적 방식에서 당신은 어떻게 앉을지에 집중을 했고 실제로 어떻게 앉을 지에 대한 방법을 나열했다.\\n선언적 방식에서는 오로지 ‘두 명의 자리' 에만 집중한다.\"), \"\\n\", React.createElement(_components.p, null, \"선언적 프로그래밍으로 컴포넌트를 구성하면, 로딩 상태와 에러 상태가 분리되며 컴포넌트는 성공한 경우만 다루게 된다. 따라서 컴포넌트의 관심사를 확실하게 분리할 수 있으며 유지보수 또한 편리해진다. 하나의 페이지에 여러 비동기 데이터를 다루는 복잡한 UI일수록 그 장점이 더 확연하게 보일 것이다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"지금에서야 밝히지만, recoil에서 비동기 데이터를 다룰 때 무조건 \", React.createElement(_components.code, null, \"<Suspense/>\"), \"를 사용해야 하는 것은 아니다. \", React.createElement(_components.a, {\n    href: \"https://recoiljs.org/docs/api-reference/core/useRecoilValueLoadable\"\n  }, \"useRecoilValueLoadable()\"), \" 을 사용하면 렌더링 중 상태를 확인할 수 있다. 하지만 애초에 React가 무엇을 보여줄 지에 집중하는 선언형 프로그래밍 방식인 만큼 이 기회를 통해 비동기 처리도 선언적으로 구성해보는 것을 추천한다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"참고\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%B0%B8%EA%B3%A0\",\n    \"aria-label\": \"참고 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"참고📌\"), \"\\n\", React.createElement(_components.p, null, \"비동기 데이터 흐름 이미지 출처 -> \", React.createElement(_components.a, {\n    href: \"https://blog.logrocket.com/refactoring-redux-app-to-use-recoil/\"\n  }, \"Refactoring a Redux app to use Recoil\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.a, {\n    href: \"https://ui.dev/imperative-vs-declarative-programming\"\n  }, \"Imperative vs Declarative Programming\")), \"\\n\", React.createElement(_components.p, null, \"같이 참고하면 좋은 글 -> \", React.createElement(_components.a, {\n    href: \"https://ko.reactjs.org/docs/concurrent-mode-patterns.html\"\n  }, \"concurrent UI 패턴\")));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/ego/Documents/go/ego-blog/content/blog/REACT/recoil-for-asynchronous-data-fetching.mdx\";\nimport * as React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport {HiChevronRight} from \"@react-icons/all-files/hi/HiChevronRight\";\nimport {HiChevronLeft} from \"@react-icons/all-files/hi/HiChevronLeft\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport {Tag, TagBox} from \"../components/Tag\";\nimport {CodeBlock} from \"../components/Block/CodeBlock\";\nimport Comment from \"../components/Post/Comment\";\nimport TableOfContents from \"../components/TableOfContents/TableOfContents\";\nconst components = {\n  img: ({src, alt}) => React.createElement(\"img\", {\n    src: src,\n    alt: alt,\n    className: \"m-auto md:w-3/4\"\n  }),\n  pre: CodeBlock,\n  code: props => React.createElement(\"code\", Object.assign({}, props, {\n    className: \"bg-background-primary text-accent-default bg-opacity-70\"\n  }))\n};\nconst BlogPostTemplate = ({data: {previous, next, site, mdx: post}, location, children}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(\"article\", {\n    className: \"blog-post px-8 pt-10\",\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(\"header\", {\n    className: \"text-center py-14\"\n  }, React.createElement(\"h1\", {\n    itemProp: \"headline\"\n  }, post.frontmatter.title), React.createElement(\"p\", {\n    className: \"text-accent-default text-xs mt-8\"\n  }, post.frontmatter.date)), React.createElement(\"section\", {\n    className: \"h-fit my-28 text-text-default\",\n    itemProp: \"articleBody\"\n  }, React.createElement(MDXProvider, {\n    components: components\n  }, children)), React.createElement(TagBox, null, post.frontmatter.tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    text: tag\n  }))), React.createElement(\"hr\", {\n    className: \"my-10\"\n  }), React.createElement(Comment), React.createElement(\"footer\")), React.createElement(\"nav\", {\n    className: \"blog-post-nav px-8 mt-8\"\n  }, React.createElement(\"ul\", {\n    className: \"flex flex-wrap justify-between list-none p-0 text-text-default\"\n  }, previous ? React.createElement(Link, {\n    to: previous.fields.slug,\n    rel: \"prev\"\n  }, React.createElement(\"li\", {\n    className: \"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3\"\n  }, React.createElement(HiChevronLeft, {\n    size: 22,\n    className: \"text-accent-default\"\n  }), React.createElement(\"p\", {\n    className: \"max-w-[28rem]\"\n  }, previous.frontmatter.title))) : React.createElement(\"div\"), next && React.createElement(Link, {\n    to: next.fields.slug,\n    rel: \"next\"\n  }, React.createElement(\"li\", {\n    className: \"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3\"\n  }, React.createElement(\"p\", {\n    className: \"max-w-[28rem]\"\n  }, next.frontmatter.title), React.createElement(HiChevronRight, {\n    size: 22,\n    className: \"text-accent-default\"\n  }))))), React.createElement(TableOfContents, {\n    contents: post.tableOfContents\n  }));\n};\nexport const Head = ({data: {mdx: post}}) => {\n  return React.createElement(Seo, {\n    title: post.frontmatter.title,\n    description: post.frontmatter.description || post.excerpt\n  });\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    mdx(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"YYYY.MM.DD\")\n        description\n        tags\n      }\n    }\n    previous: mdx(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: mdx(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","blockquote","p","a","h1","span","code","strong","pre","em","ol","li","h2","br","_provideComponents","components","React","href","id","style","position","className","dangerouslySetInnerHTML","__html","src","width","title","wrapper","MDXLayout","img","_ref","alt","CodeBlock","BlogPostTemplate","_ref2","_site$siteMetadata","data","previous","next","site","mdx","post","location","children","siteTitle","siteMetadata","Layout","itemScope","itemType","itemProp","frontmatter","date","MDXProvider","TagBox","tags","map","tag","Tag","key","text","Comment","Link","to","fields","slug","rel","HiChevronLeft","size","HiChevronRight","TableOfContents","contents","tableOfContents","Head","_ref3","Seo","description","excerpt","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}