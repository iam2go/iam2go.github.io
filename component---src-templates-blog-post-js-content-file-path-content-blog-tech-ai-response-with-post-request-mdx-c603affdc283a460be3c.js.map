{"version":3,"file":"component---src-templates-blog-post-js-content-file-path-content-blog-tech-ai-response-with-post-request-mdx-c603affdc283a460be3c.js","mappings":"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","sources":["webpack://leego.dev.log/./content/blog/TECH/ai-response-with-post-request.mdx","webpack://leego.dev.log/./src/templates/blog-post.js"],"sourcesContent":["/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h1: \"h1\",\n    a: \"a\",\n    span: \"span\",\n    pre: \"pre\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"Chat GPT에 질문을 하면 답변이 한번에 랜더링 되는 것이 아니라, 실시간으로 답변을 타이핑 하듯 글자가 출력된다. 이러한 방식은 단순한 시각적 효과를 넘어 사용자 경험 측면에서도 여러 이점을 제공한다.\\n첫번째로는 전체 데이터가 로드될 때까지 기다리지 않고, 즉각적으로 답변을 출력하기 때문에 대기 시간이 줄어든 효과를 준다. 두번째로는 스트리밍 방식으로 제공함으로써 긴 응답도 점진적으로 정보를 습득하여 가독성을 높여준다.\\n이러한 스트리밍 응답 방식을 구현하기 위해서는 \", React.createElement(_components.code, null, \"ReadableStream\"), \"이라는 기술이 활용된다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"readablestream이란\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#readablestream%EC%9D%B4%EB%9E%80\",\n    \"aria-label\": \"readablestream이란 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), React.createElement(_components.code, null, \"ReadableStream\"), \"이란\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"ReadableStream\"), \"은 웹 브라우저의 \", React.createElement(_components.code, null, \"Streams API\"), \"에서 제공하는 기능으로, 네트워크 응답을 청크 단위로 받아 처리할 수 있도록 돕는다.\\n서버에서 데이터를 청크 단위로 보내면, 클라이언트에서 \", React.createElement(_components.code, null, \"ReadableStream\"), \" 을 사용하여 데이터를 한 조각씩 읽고, 읽은 데이터를 사용자에게 즉시 렌더링하는 방식이다.\"), \"\\n\", React.createElement(_components.p, null, \"이 \", React.createElement(_components.code, null, \"ReadableStream\"), \"을 사용해서 문제에 대한 AI 답변을 받아오는 기능을 구현보았다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h1, {\n    id: \"스트리밍-데이터-처리-구현\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%8A%A4%ED%8A%B8%EB%A6%AC%EB%B0%8D-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC-%EA%B5%AC%ED%98%84\",\n    \"aria-label\": \"스트리밍 데이터 처리 구현 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"스트리밍 데이터 처리 구현\"), \"\\n\", React.createElement(_components.p, null, \"답변을 받아오는 매서드의 전체 코드는 아래와 같다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const getAnswer = async (index: number) => {\\n    let text = '';\\n\\n    try {\\n        const controller = new AbortController();\\n        controllerRef.current = controller;\\n\\n        // 서버로부터 스트리밍 데이터를 받아옴\\n        const response = await getAnswerStream(questionList[questionNo].question_text, controller.signal);\\n        if (!response.ok || !response.body) throw new Error('');\\n\\n        const reader = response.body.getReader();\\n        const decoder = new TextDecoder();\\n        \\n        let resultNo: number | null = null; // 문제 정답\\n        let incompleteChunk = '';\\n\\n        // 스트리밍 데이터 처리\\n        await processStream(reader, decoder, (chunk: string) => {\\n            const { parsedDataList, remain } = parseJSONStream(chunk, incompleteChunk);\\n            incompleteChunk = remain;\\n\\n            // 추출한 데이터 텍스트에 추가, 상태 업데이트\\n            text = updateTextAndState(parsedDataList, text);\\n            // result_no를 전달받았다면, resultNo에 삽입\\n            if (parsedDataList[parsedDataList.length - 1]?.result_no) {\\n               resultNo = parseInt(parsedDataList[parsedDataList.length - 1].result_no)\\n            }\\n        });\\n\\n        // 답변 완료\\n        completeAnswerProcessing(questionNo, resultNo, text);\\n    } catch (error) {\\n        handleError(error, questionNo, text);\\n    }\\n};\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"데이터-요청\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9A%94%EC%B2%AD\",\n    \"aria-label\": \"데이터 요청 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"데이터 요청\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"/**\\n * @description 문제풀이 요청\\n */\\nexport const getAnswerStream = async (\\n    questionText: string,\\n    signal: AbortSignal\\n): Promise<Response> => {\\n    }\\n    const response = await fetch(url, {\\n            method: 'POST',\\n            credentials: 'omit',\\n            signal,\\n            headers: {\\n                'Content-Type': 'application/json',\\n                cno: companyNo,\\n            },\\n            body: JSON.stringify({ question: questionText }),\\n        });\\n        \\n     return response;\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"서버에 데이터를 요청하는 API 호출 매서드는 위와 같다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const controller = new AbortController();\\ncontrollerRef.current = controller;\\n\\nconst response = await getAnswerStream(questionList[questionNo].question_text, controller.signal);\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"getAnswer\"), \" 매서드에서 \", React.createElement(_components.code, null, \"AbortController\"), \" 객체를 생성하여 \", React.createElement(_components.code, null, \"getAnswerStream\"), \" 호출시 두번째 인자로 signal을 넘겨주었다.\\n이 signal을 fetch요청에 삽입하여 필요 시 요청을 중단할 수 있도록 구현했다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"스트림-데이터-처리\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EC%8A%A4%ED%8A%B8%EB%A6%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B2%98%EB%A6%AC\",\n    \"aria-label\": \"스트림 데이터 처리 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"스트림 데이터 처리\"), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"processStream\"), \" 매서드는 서버에서 반환된 \", React.createElement(_components.code, null, \"ReadableStream\"), \"을 읽어 들여 수신된 데이터를 부분적으로 처리한다. 각 데이터 조각이 수신될 때마다 chunk로 전달되며, 이 데이터를 JSON 형태로 파싱하여 필요한 데이터를 추출한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const processStream = async (\\n    reader: ReadableStreamDefaultReader<Uint8Array>, \\n    decoder: TextDecoder, \\n    onChunkReceived: (chunk: string) => void\\n) => {\\n    // eslint-disable-next-line no-constant-condition\\n    while (true) {\\n        const { value, done } = await reader.read();\\n        if (done) break;\\n        const chunk = decoder.decode(value);\\n        onChunkReceived(chunk);\\n    }\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, React.createElement(_components.code, null, \"getReader()\"), \"를 통해 읽어온 스트림은 보통 청크 단위의 바이너리 데이터(Uint8Array) 형태로 제공된다. 따라서 \", React.createElement(_components.code, null, \"decoder.decode(value)\"), \" 를 통해 스트림을 문자열로 변환한다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"서버에서 수신하는 \", React.createElement(_components.code, null, \"chunk\"), \" 값이 항상 완전한 JSON 형식으로 도착하는 것은 아니었다. 특히 JSON 데이터가 잘려서 여러 개의 청크로 나뉘어 전송될 경우, 파싱 과정에서 오류가 발생할 위험이 있었다. 이 문제를 해결하기 위해 \", React.createElement(_components.code, null, \"incompleteChunk\"), \" 변수를 사용하여 불완전한 청크들을 임시로 저장하고, 다음 청크를 수신할 때 이를 합쳐 완전한 JSON 형식으로 파싱하도록 처리했다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"예를 들어, 데이터가 다음과 같이 두 개의 청크로 나뉘어 수신된다고 하자.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"첫 번째 청크: \", React.createElement(_components.code, null, \"\\\"{ text: '이렇게' } {text: '오고'} {text: '어쩔때는'} {text: '잘\\\"\")), \"\\n\", React.createElement(_components.li, null, \"두 번째 청크: \", React.createElement(_components.code, null, \"\\\"려서옵니다' } { text: 'TT' }\\\"\")), \"\\n\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.p, null, \"첫 번째 청크를 처리할 때 \", React.createElement(_components.code, null, \"parsedDataList\"), \"에는 \", React.createElement(_components.code, null, \"[ { text: '이렇게' }, { text: '오고' }, { text: '어쩔때는' } ]\"), \"와 같이 완전한 JSON 객체들만 담기고, 불완전한 JSON 데이터 \", React.createElement(_components.code, null, \"\\\"{text: '잘\\\"\"), \"는 \", React.createElement(_components.code, null, \"remain\"), \"에 저장된다.\"), \"\\n\", React.createElement(_components.p, null, \"다음 청크를 수신시 이 \", React.createElement(_components.code, null, \"remain\"), \" 값을 새로운 청크와 결합하여 완전한 JSON 형태로 재구성한다. \", React.createElement(_components.code, null, \"parsedDataList\"), \"에 \", React.createElement(_components.code, null, \"\\\"{ text: '잘려서옵니다' } { text: 'TT' }\\\"\"), \" 가 담기게된다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"await processStream(reader, decoder, (chunk: string) => {\\n            const { parsedDataList, remain } = parseJSONStream(chunk, incompleteChunk);\\n            incompleteChunk = remain;\\n\\n        });\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"답변-업데이트\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%8B%B5%EB%B3%80-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\",\n    \"aria-label\": \"답변 업데이트 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"답변 업데이트\"), \"\\n\", React.createElement(_components.p, null, \"추출한 데이터를 기존 텍스트에 추가하고,  실시간으로 state를 업데이트하여 사용자에게 반영된 답변을 보여준다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const updateTextAndState = (parsedDataList: Record<string, string>[], currentText: string) => {\\n    const newStreamText = parsedDataList.map(({ text }) => text ?? '').join('');\\n    setStreamText(prev => prev + newStreamText);\\n    return currentText + newStreamText;\\n};\\n\")), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"답변-완료\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%8B%B5%EB%B3%80-%EC%99%84%EB%A3%8C\",\n    \"aria-label\": \"답변 완료 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"답변 완료\"), \"\\n\", React.createElement(_components.p, null, \"문제에 대한 답변이 모두 완료되면 \", React.createElement(_components.code, null, \"completeAnswerProcessing\"), \" 를 호출한다.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \"const completeAnswerProcessing = (questionNo: number, resultNo: number | null, text: string) => {\\n    updateQuestion(questionNo, resultNo, text);\\n    if (questionList.length > questionNo + 1) {\\n        moveOnNextQuestion(questionNo);\\n    } else {\\n        setIsAnswering(false);\\n        addToast({ type: 'success', message: '문제풀이가 완료되었습니다.' });\\n    }\\n};\\n\")), \"\\n\", React.createElement(_components.p, null, \"해당 문제에 대한 답변을 최종적으로 저장한 후 다음 문제로 넘어간다. 만약 마지막 문제라면, 문제풀이를 종료한다.\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(\"br\"), \"\\n\", React.createElement(_components.h2, {\n    id: \"답변-중지\",\n    style: {\n      position: \"relative\"\n    }\n  }, React.createElement(_components.a, {\n    href: \"#%EB%8B%B5%EB%B3%80-%EC%A4%91%EC%A7%80\",\n    \"aria-label\": \"답변 중지 permalink\",\n    className: \"anchor before\"\n  }, React.createElement(_components.span, {\n    dangerouslySetInnerHTML: {\n      __html: \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg>\"\n    }\n  })), \"답변 중지\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, null, \" const onCancelAnswering = () => {\\n        if (controllerRef.current) {\\n            controllerRef.current.abort()\\n        }\\n    }\\n\")), \"\\n\", React.createElement(_components.p, null, \"답변 생성을 중지할때는 \", React.createElement(_components.code, null, \"onCancelAnswering\"), \" 를 호출하여 요청을 중단한다.\\n\", React.createElement(_components.code, null, \"controllerRef.current\"), \" 에는 \", React.createElement(_components.code, null, \"AbortController\"), \"  가 담겨져 있으므로, \", React.createElement(_components.code, null, \"controllerRef.current.abort()\"), \" 를 호출해 진행 중인 스트림을 중단하고 서버와의 연결을 종료한다.\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/ego/Documents/go/ego-blog/content/blog/TECH/ai-response-with-post-request.mdx\";\nimport * as React from \"react\";\nimport {Link, graphql} from \"gatsby\";\nimport {HiChevronRight} from \"@react-icons/all-files/hi/HiChevronRight\";\nimport {HiChevronLeft} from \"@react-icons/all-files/hi/HiChevronLeft\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\nimport {Tag, TagBox} from \"../components/Tag\";\nimport {CodeBlock} from \"../components/Block/CodeBlock\";\nimport Comment from \"../components/Post/Comment\";\nimport TableOfContents from \"../components/TableOfContents/TableOfContents\";\nconst components = {\n  img: ({src, alt}) => React.createElement(\"img\", {\n    src: src,\n    alt: alt,\n    className: \"m-auto md:w-3/4\"\n  }),\n  pre: CodeBlock,\n  code: props => React.createElement(\"code\", Object.assign({}, props, {\n    className: \"bg-background-primary text-accent-default bg-opacity-70\"\n  }))\n};\nconst BlogPostTemplate = ({data: {previous, next, site, mdx: post}, location, children}) => {\n  const siteTitle = site.siteMetadata?.title || `Title`;\n  return React.createElement(Layout, {\n    location: location,\n    title: siteTitle\n  }, React.createElement(\"article\", {\n    className: \"blog-post px-8 pt-10\",\n    itemScope: true,\n    itemType: \"http://schema.org/Article\"\n  }, React.createElement(\"header\", {\n    className: \"text-center py-14\"\n  }, React.createElement(\"h1\", {\n    itemProp: \"headline\"\n  }, post.frontmatter.title), React.createElement(\"p\", {\n    className: \"text-accent-default text-xs mt-8\"\n  }, post.frontmatter.date)), React.createElement(\"section\", {\n    className: \"h-fit my-28 text-text-default\",\n    itemProp: \"articleBody\"\n  }, React.createElement(MDXProvider, {\n    components: components\n  }, children)), React.createElement(TagBox, null, post.frontmatter.tags.map(tag => React.createElement(Tag, {\n    key: tag,\n    text: tag\n  }))), React.createElement(\"hr\", {\n    className: \"my-10\"\n  }), React.createElement(Comment), React.createElement(\"footer\")), React.createElement(\"nav\", {\n    className: \"blog-post-nav px-8 mt-8\"\n  }, React.createElement(\"ul\", {\n    className: \"flex flex-wrap justify-between list-none p-0 text-text-default\"\n  }, previous ? React.createElement(Link, {\n    to: previous.fields.slug,\n    rel: \"prev\"\n  }, React.createElement(\"li\", {\n    className: \"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3\"\n  }, React.createElement(HiChevronLeft, {\n    size: 22,\n    className: \"text-accent-default\"\n  }), React.createElement(\"p\", {\n    className: \"max-w-[28rem]\"\n  }, previous.frontmatter.title))) : React.createElement(\"div\"), next && React.createElement(Link, {\n    to: next.fields.slug,\n    rel: \"next\"\n  }, React.createElement(\"li\", {\n    className: \"bg-background-primary/50 text-sm p-3 rounded-xl h-fit flex items-center gap-3\"\n  }, React.createElement(\"p\", {\n    className: \"max-w-[28rem]\"\n  }, next.frontmatter.title), React.createElement(HiChevronRight, {\n    size: 22,\n    className: \"text-accent-default\"\n  }))))), React.createElement(TableOfContents, {\n    contents: post.tableOfContents\n  }));\n};\nexport const Head = ({data: {mdx: post}}) => {\n  return React.createElement(Seo, {\n    title: post.frontmatter.title,\n    description: post.frontmatter.description || post.excerpt\n  });\n};\nBlogPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    mdx(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      tableOfContents\n      frontmatter {\n        title\n        date(formatString: \"YYYY.MM.DD\")\n        description\n        tags\n      }\n    }\n    previous: mdx(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: mdx(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`;\n"],"names":["_createMdxContent","props","_components","Object","assign","p","code","h1","a","span","pre","h2","ol","li","_provideComponents","components","React","id","style","position","href","className","dangerouslySetInnerHTML","__html","wrapper","MDXLayout","img","_ref","src","alt","CodeBlock","BlogPostTemplate","_ref2","_site$siteMetadata","data","previous","next","site","mdx","post","location","children","siteTitle","siteMetadata","title","Layout","itemScope","itemType","itemProp","frontmatter","date","MDXProvider","TagBox","tags","map","tag","Tag","key","text","Comment","Link","to","fields","slug","rel","HiChevronLeft","size","HiChevronRight","TableOfContents","contents","tableOfContents","Head","_ref3","Seo","description","excerpt","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}