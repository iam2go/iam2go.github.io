{"componentChunkName":"component---src-templates-search-js","path":"/tags/modal/","result":{"data":{"site":{"siteMetadata":{"title":"leego.dev.log"}},"allMdx":{"nodes":[{"excerpt":"이전 포스팅에서 context API, redux를 사용한 모달 관리에 대해서 소개했었다. // store/modalSlice.js\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst…","fields":{"slug":"/REACT/\bmodal-management-with-recoil/"},"frontmatter":{"date":"2023.10.02","title":"recoil을 사용한 전역 모달 관리(with TypeScript)","description":"(아마도) modal 관리 마지막 시리즈. recoil로 모달 관리하는 방법","tags":["react","recoil","modal"]}},{"excerpt":"이 글은 Portal을 사용한 모달창 만들기에서 이어집니다. 모달을 필요한 컴포넌트에서 그때그때 렌더링 하는 방법은 불필요한 코드를 늘리며, 각각의 컴포넌트에서 모달에 관련된 로직까지 담당하게 되어 컴포넌트의 단일 책임 원칙을 위반한다. 모달의…","fields":{"slug":"/REACT/efficient-modal-management/"},"frontmatter":{"date":"2022.10.12","title":"효율적으로 모달 관리하기","description":"context API, Redux를 사용하여 전역으로 모달 관리하기","tags":["react","modal"]}},{"excerpt":"모달이란, 다이얼로그 실행 시 포커스와 제어권을 독점하여 다이얼로그를 종료하기 전까지 기존의 화면을 제어할 수 없는 기능을 뜻한다. 따라서 모달은 항상 화면의 최상위에 위치해야 하며, 모달이 열려있을 때는 기존 화면의 제어가 불가능해야 한다.\n\n일반적…","fields":{"slug":"/REACT/create-modal-using-portal/"},"frontmatter":{"date":"2022.06.14","title":"Portal을 사용한 모달창 만들기","description":"createPortal을 사용해서 기본적인 modal을 띄우는 방법을 설명합니다.","tags":["react","modal"]}}]}},"pageContext":{"type":"tag","value":"modal"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}