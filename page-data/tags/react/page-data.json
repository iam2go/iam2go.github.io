{"componentChunkName":"component---src-templates-search-js","path":"/tags/react/","result":{"data":{"site":{"siteMetadata":{"title":"leego.dev.log"}},"allMdx":{"nodes":[{"excerpt":"이전 포스팅에서 context API, redux를 사용한 모달 관리에 대해서 소개했었다. // store/modalSlice.js\n\nimport { createSlice } from \"@reduxjs/toolkit\";\n\nconst…","fields":{"slug":"/REACT/\bmodal-management-with-recoil/"},"frontmatter":{"date":"2023.10.02","title":"recoil을 사용한 전역 모달 관리(with TypeScript)","description":"(아마도) modal 관리 마지막 시리즈. recoil로 모달 관리하는 방법","tags":["react","recoil","modal"]}},{"excerpt":"react-query를 프로젝트에 셋팅할 때, 가장 먼저 하는 것은 앱의 최상위에서 QueryClientProvider로 우리의 앱을 감싸주는 일이다. import { QueryClient, QueryClientProvider } from…","fields":{"slug":"/REACT/how-does-react-query-work/"},"frontmatter":{"date":"2023.06.19","title":"react-query는 어떻게 작동할까","description":"react-query는 어떤 구조를 가지고 있으며 어떻게 동작할까? 구조 파헤쳐보기","tags":["react","react-query"]}},{"excerpt":"회사 프로젝트에서 특정 수치를 조회하기 위해 사용하는 API가 있다. 이 API는 상황에 따라서 호출 시간이 오래 걸리고, 조회 항목이 많아질수록 호출 시간이 길어진다. 만약 사용자가 수치를 조회하는 중 화면을 나간다면, 수치 조회 API는…","fields":{"slug":"/REACT/cancelling-axios-calls-with-react-saga/"},"frontmatter":{"date":"2022.12.22","title":"Redux-saga를 통해 axios 호출 취소하기","description":"Redux-saga를 사용하여 axios 호출을 취소하는 방법","tags":["react","redux-saga"]}},{"excerpt":"이전 프로젝트에서는 괜찮았으나, 이번 React-Query 프로젝트에서는 Atomic system에서 착안한 새로운 폴더 구조를 시도해본 만큼 코드 상단의 무수한 ../../../ 들이 신경 쓰이기 시작했다. 그동안 미뤄왔던 path…","fields":{"slug":"/REACT/setting-path-alias-in-cra/"},"frontmatter":{"date":"2022.12.19","title":"CRA에서 Path alias 설정하기","description":"무수한 ../../../ 지옥에서 벗어나보자","tags":["react","CRA"]}},{"excerpt":"이 글은 Portal을 사용한 모달창 만들기에서 이어집니다. 모달을 필요한 컴포넌트에서 그때그때 렌더링 하는 방법은 불필요한 코드를 늘리며, 각각의 컴포넌트에서 모달에 관련된 로직까지 담당하게 되어 컴포넌트의 단일 책임 원칙을 위반한다. 모달의…","fields":{"slug":"/REACT/efficient-modal-management/"},"frontmatter":{"date":"2022.10.12","title":"효율적으로 모달 관리하기","description":"context API, Redux를 사용하여 전역으로 모달 관리하기","tags":["react","modal"]}},{"excerpt":"💡 이 글은 'React스러운 상태관리 라이브러리, Recoil을 알아보자' 에서 이어집니다. recoil에서는 selector 를 사용하여 비동기 데이터를 처리한다.\n\nredux에서 비동기 처리를 할 때는 redux-thunk나 redux…","fields":{"slug":"/REACT/recoil-for-asynchronous-data-fetching/"},"frontmatter":{"date":"2022.09.17","title":"recoil과 비동기 데이터 호출 (+ 선언적 프로그래밍)","description":"recoil을 사용해서 비동기 데이터를 호출하는 방법을 소개한다. 이와 더헤 선언적 프로그래밍이 무엇인지 알아보고 선언적으로 비동기 처리하는 방식을 다뤘다.","tags":["react","recoil"]}},{"excerpt":"이제까지의 프로젝트에는 상태 관리 라이브러리로 항상 Redux를 사용했었는데, 그 이유는 단순하게 대부분의 사용자들이 redux를 사용했고, 사용자들이 가장 많이 사용하는 라이브러리 = 좋은 라이브러리라는 생각이 있었기 때문이다. Redux는 한때…","fields":{"slug":"/REACT/lets-explore-recoil/"},"frontmatter":{"date":"2022.08.17","title":"React스러운 상태관리 라이브러리, Recoil을 알아보자","description":"어느 순간, redux가 너무 과하다고 느껴졌다. 또 다른 상태관리 라이브러리 Recoil의 장점은 무엇인지, 어떻게 사용하는지 탐구해보았다.","tags":["react","recoil"]}},{"excerpt":"다크 모드는 어두운 배경을 중심으로 전반적인 요소를 어두운 색상 체계로 구성한 low-light UI를 지칭한다. 스마트폰과 같은 디바이스의 사용량이 증가면서, 눈의 피로를 덜어주고 집중력을 높여준다는 이유로 다크모드가 등장하였다. 현재는 수많은…","fields":{"slug":"/REACT/darkmode-in-react/"},"frontmatter":{"date":"2022.08.11","title":"다크모드 적용하기 (with. Styled-component, Context API)","description":"프로젝트에 다크모드를 적용해보았다","tags":["react"]}},{"excerpt":"모달이란, 다이얼로그 실행 시 포커스와 제어권을 독점하여 다이얼로그를 종료하기 전까지 기존의 화면을 제어할 수 없는 기능을 뜻한다. 따라서 모달은 항상 화면의 최상위에 위치해야 하며, 모달이 열려있을 때는 기존 화면의 제어가 불가능해야 한다.\n\n일반적…","fields":{"slug":"/REACT/create-modal-using-portal/"},"frontmatter":{"date":"2022.06.14","title":"Portal을 사용한 모달창 만들기","description":"createPortal을 사용해서 기본적인 modal을 띄우는 방법을 설명합니다.","tags":["react","modal"]}},{"excerpt":"import { useEffect, useRef } from 'react'; function usePrevious(stateOrProp) {\n  const previous = useRef(null);\n\n  useEffect…","fields":{"slug":"/REACT/introdution-to-useful-custom-hook/"},"frontmatter":{"date":"2021.10.17","title":"유용한 Custom hook 소개","description":"프로젝트를 하면서 자주 사용하는 Custom hooks 모음","tags":["react","custom-hook"]}},{"excerpt":"Building your own Hooks lets you extract component logic into reusable functions. 최근 내가 컴포넌트를 설계할 때 가장 중요하게 생각하는 것은 컴포넌트의 역할이 명확하게 나타나는가…","fields":{"slug":"/REACT/considerations-before-creating-custom-hook/"},"frontmatter":{"date":"2021.10.16","title":"Custom hook을 만들기 전에 고려해야 할 것들","description":"use로 시작하는 이름을 붙여주는 것만으로 custom hook이 될 수 없다.","tags":["react","custom-hook"]}},{"excerpt":"useCallback과 useMemo는 메모이제이션 된 값을 반환한다. 차이점은 useCallback은 함수를 메모이제이션하고 useMemo는 값을 메모이제이션한다. 면접을 준비하여 외웠던 대답이다. 실제 프로젝트를 하면서 useCallback을…","fields":{"slug":"/REACT/profer-usage-of-usecallback-usememo/"},"frontmatter":{"date":"2021.09.12","title":"useCallback과 useMemo 제대로 사용하기","description":"나는 지금까지 useCallback과 useMemo를 올바르게 사용하고 있었을까?","tags":["react"]}},{"excerpt":"공식문서에서는 Redux-saga를 다음과 같이 소개하고 있다. Redux-saga는 react/redux 애플리케이션의 사이드 이펙트, 예를 들면 데이터 fetching이나 브라우저 캐시에 접근하는 순수하지 않은 비동기 동작들을 더 쉽고 보기…","fields":{"slug":"/REACT/lets-explore-redux-saga/"},"frontmatter":{"date":"2021.09.07","title":"React-saga를 알아보자","description":"redux-saga는 어떤 방식으로 동작하는지, 왜 우리팀이 redux-saga를 도입했는지에 대한 기록","tags":["react","redux-saga"]}}]}},"pageContext":{"type":"tag","value":"react"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}